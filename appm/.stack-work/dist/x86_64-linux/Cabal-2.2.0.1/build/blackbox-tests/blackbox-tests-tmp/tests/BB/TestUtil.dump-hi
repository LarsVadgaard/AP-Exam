
==================== FINAL INTERFACE ====================
2018-11-05 01:25:45.635439169 UTC

interface main:TestUtil 8043
  interface hash: 3faf9c726cc9f12495abf52c22d06624
  ABI hash: d5aa24ac936e9565ec68a89a676f56b7
  export-list hash: e68ff4235aa338aab4e60e1e73b47b8d
  orphan hash: caa5942f1fb20bca536475647d26ae53
  flag hash: f87cfccf301c75dfb4e52ead32b7e8b1
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  TestUtil.c1Out
  TestUtil.c1l
  TestUtil.c1r
  TestUtil.c2Out
  TestUtil.c2l
  TestUtil.c2r
  TestUtil.c3Out
  TestUtil.c3l
  TestUtil.c3r
  TestUtil.c4Out
  TestUtil.c4l
  TestUtil.c4r
  TestUtil.c5Out
  TestUtil.c5l
  TestUtil.c5r
  TestUtil.listToVersion
  TestUtil.tests
  TestUtil.v1
  TestUtil.v2
  TestUtil.v3
  TestUtil.v4
  TestUtil.v5
  TestUtil.v6
  TestUtil.v7
  TestUtil.v8
module dependencies:
package dependencies: ansi-terminal-0.8.0.4 ansi-wl-pprint-0.6.8.2
                      appm-0.0.0 array-0.5.2.0 async-2.2.1 base-4.11.1.0 binary-0.8.5.1
                      bytestring-0.10.8.2 call-stack-0.1.0 clock-0.7.2 colour-2.3.4
                      containers-0.5.11.0 deepseq-1.4.3.0 ghc-prim-0.5.2.0
                      hashable-1.2.7.0 integer-gmp-1.0.2.0 mtl-2.2.2
                      optparse-applicative-0.14.2.0 process-1.6.3.0 stm-2.4.5.0
                      tagged-0.8.5 tasty-1.1.0.3 tasty-hunit-0.10.0.1 text-1.2.3.0
                      transformers-0.5.5.0 unbounded-delays-0.1.1.0 unix-2.7.2.2
                      wcwidth-0.0.2
orphans: stm-2.4.5.0:Control.Monad.STM
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show
         transformers-0.5.5.0:Control.Monad.Trans.Error
         colour-2.3.4:Data.Colour base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         clock-0.7.2:System.Clock containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         tagged-0.8.5:Data.Tagged tasty-1.1.0.3:Test.Tasty.Core
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
import  -/  appm-0.0.0:Defs 33704ed0d96c186bd2b1ffcf2d3c5e21
import  -/  appm-0.0.0:Utils 56e11831633c003055841737133cc50e
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  tasty-1.1.0.3:Test.Tasty 3aee3445f1ab857a6b68dde2f15a99f9
import  -/  tasty-1.1.0.3:Test.Tasty.Core c12f1e13f1a16d28e3df29c23937c462
import  -/  tasty-hunit-0.10.0.1:Test.Tasty.HUnit 6c91261a2c27cb83a268b6d3017c9a06
import  -/  tasty-hunit-0.10.0.1:Test.Tasty.HUnit.Orig eaa0b10673ab6d8aa2d32b170f906247
9f9c2f1c181bc83911ad73ef8f040706
  $s$fShow(,)_$s$fShow(,,) ::
    GHC.Show.Show (GHC.Types.Bool, Defs.Version, Defs.Version)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Types.Bool, Defs.Version, Defs.Version)
                  (GHC.Show.$fShow(,,)_$cshowsPrec
                     @ GHC.Types.Bool
                     @ Defs.Version
                     @ Defs.Version
                     GHC.Show.$fShowBool
                     Defs.$fShowVersion
                     Defs.$fShowVersion)
                  (\ (x :: (GHC.Types.Bool, Defs.Version, Defs.Version)) ->
                   GHC.Show.$fShow(,,)_$cshowsPrec
                     @ GHC.Types.Bool
                     @ Defs.Version
                     @ Defs.Version
                     GHC.Show.$fShowBool
                     Defs.$fShowVersion
                     Defs.$fShowVersion
                     GHC.Show.$fShow(,)1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [(GHC.Types.Bool, Defs.Version, Defs.Version)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (GHC.Types.Bool, Defs.Version, Defs.Version)
                     (GHC.Show.$fShow(,,)_$cshowsPrec
                        @ GHC.Types.Bool
                        @ Defs.Version
                        @ Defs.Version
                        GHC.Show.$fShowBool
                        Defs.$fShowVersion
                        Defs.$fShowVersion
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
e7c67f7884d07a18aed26738e9bb49ec
  $s$fShowMaybe ::
    GHC.Show.Show (GHC.Base.Maybe [(Defs.PName, Defs.PConstr)])
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe [(Defs.PName, Defs.PConstr)])
                  (GHC.Show.$fShowMaybe_$cshowsPrec
                     @ [(Defs.PName, Defs.PConstr)]
                     TestUtil.$s$fShowMaybe_$s$fShow[])
                  (\ (x :: GHC.Base.Maybe [(Defs.PName, Defs.PConstr)]) ->
                   case x of wild {
                     GHC.Base.Nothing -> GHC.Show.$fShowMaybe4
                     GHC.Base.Just b1
                     -> GHC.Base.augment
                          @ GHC.Types.Char
                          (\ @ b
                             (c :: GHC.Types.Char -> b -> b)[OneShot]
                             (n :: b)[OneShot] ->
                           GHC.Base.foldr @ GHC.Types.Char @ b c n GHC.Show.$fShowMaybe1)
                          (case b1 of wild1 {
                             []
                             -> GHC.CString.unpackAppendCString#
                                  GHC.Show.showList__4
                                  (GHC.Types.[] @ GHC.Types.Char)
                             : x1 xs
                             -> GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showList__3
                                  (GHC.Show.$fShow(,)_$cshowsPrec
                                     @ Defs.PName
                                     @ (GHC.Types.Bool, Defs.Version, Defs.Version)
                                     Defs.$fShowPName
                                     TestUtil.$s$fShow(,)_$s$fShow(,,)
                                     GHC.Show.$fShow(,)1
                                     x1
                                     (let {
                                        lvl73 :: [GHC.Types.Char]
                                        = GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.showList__2
                                            (GHC.Types.[] @ GHC.Types.Char)
                                      } in
                                      letrec {
                                        showl1 :: [(Defs.PName,
                                                    (GHC.Types.Bool, Defs.Version, Defs.Version))]
                                                  -> GHC.Base.String
                                          {- Arity: 1, Strictness: <S,1*U> -}
                                        = \ (ds2 :: [(Defs.PName,
                                                      (GHC.Types.Bool, Defs.Version,
                                                       Defs.Version))]) ->
                                          case ds2 of wild2 {
                                            [] -> lvl73
                                            : y ys
                                            -> GHC.Types.:
                                                 @ GHC.Types.Char
                                                 GHC.Show.showList__1
                                                 (GHC.Show.$fShow(,)_$cshowsPrec
                                                    @ Defs.PName
                                                    @ (GHC.Types.Bool, Defs.Version, Defs.Version)
                                                    Defs.$fShowPName
                                                    TestUtil.$s$fShow(,)_$s$fShow(,,)
                                                    GHC.Show.$fShow(,)1
                                                    y
                                                    (showl1 ys)) }
                                      } in
                                      showl1 xs)) }) })
                  (\ (ls :: [GHC.Base.Maybe [(Defs.PName, Defs.PConstr)]])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (GHC.Base.Maybe [(Defs.PName, Defs.PConstr)])
                     (GHC.Show.$fShowMaybe_$cshowsPrec
                        @ [(Defs.PName, Defs.PConstr)]
                        TestUtil.$s$fShowMaybe_$s$fShow[]
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
0af383007a78148e602b2608803e9a86
  $s$fShowMaybe_$cshowList ::
    [GHC.Base.Maybe [(Defs.PName, Defs.PConstr)]] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [GHC.Base.Maybe [(Defs.PName, Defs.PConstr)]])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (GHC.Base.Maybe [(Defs.PName, Defs.PConstr)])
                   (GHC.Show.$fShowMaybe_$cshowsPrec
                      @ [(Defs.PName, Defs.PConstr)]
                      TestUtil.$s$fShowMaybe_$s$fShow[]
                      GHC.Show.$fShow(,)1)
                   ls
                   s) -}
e5458be287df442119300645f25f7750
  $s$fShowMaybe_$s$fShow[] ::
    GHC.Show.Show [(Defs.PName, Defs.PConstr)]
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [(Defs.PName, Defs.PConstr)]
                  (\ (ds :: GHC.Types.Int)
                     (ls :: [(Defs.PName,
                              (GHC.Types.Bool, Defs.Version, Defs.Version))])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                     (GHC.Show.$fShow(,)_$cshowsPrec
                        @ Defs.PName
                        @ (GHC.Types.Bool, Defs.Version, Defs.Version)
                        Defs.$fShowPName
                        TestUtil.$s$fShow(,)_$s$fShow(,,)
                        GHC.Show.$fShow(,)1)
                     ls
                     s)
                  (\ (x :: [(Defs.PName, Defs.PConstr)]) ->
                   GHC.Show.showList__
                     @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                     (GHC.Show.$fShow(,)_$cshowsPrec
                        @ Defs.PName
                        @ (GHC.Types.Bool, Defs.Version, Defs.Version)
                        Defs.$fShowPName
                        TestUtil.$s$fShow(,)_$s$fShow(,,)
                        GHC.Show.$fShow(,)1)
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [[(Defs.PName, Defs.PConstr)]]) (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ [(Defs.PName, Defs.PConstr)]
                     (\ (ls1 :: [(Defs.PName,
                                  (GHC.Types.Bool, Defs.Version, Defs.Version))])
                        (s1 :: GHC.Base.String)[OneShot] ->
                      GHC.Show.showList__
                        @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                        (GHC.Show.$fShow(,)_$cshowsPrec
                           @ Defs.PName
                           @ (GHC.Types.Bool, Defs.Version, Defs.Version)
                           Defs.$fShowPName
                           TestUtil.$s$fShow(,)_$s$fShow(,,)
                           GHC.Show.$fShow(,)1)
                        ls1
                        s1)
                     ls
                     s) -}
f751591a8baf71e29b708a6bcb360704
  $s$fShow[]_$cshow ::
    [(Defs.PName, Defs.PConstr)] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [(Defs.PName, Defs.PConstr)]) ->
                 GHC.Show.showList__
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   (GHC.Show.$fShow(,)_$cshowsPrec
                      @ Defs.PName
                      @ (GHC.Types.Bool, Defs.Version, Defs.Version)
                      Defs.$fShowPName
                      TestUtil.$s$fShow(,)_$s$fShow(,,)
                      GHC.Show.$fShow(,)1)
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
80b3d59c2fc48617b3413ad7a27f92bf
  $s$fShow[]_$cshowList ::
    [[(Defs.PName, Defs.PConstr)]] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [[(Defs.PName, Defs.PConstr)]]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ [(Defs.PName, Defs.PConstr)]
                   (\ (ls1 :: [(Defs.PName,
                                (GHC.Types.Bool, Defs.Version, Defs.Version))])
                      (s1 :: GHC.Base.String)[OneShot] ->
                    GHC.Show.showList__
                      @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                      (GHC.Show.$fShow(,)_$cshowsPrec
                         @ Defs.PName
                         @ (GHC.Types.Bool, Defs.Version, Defs.Version)
                         Defs.$fShowPName
                         TestUtil.$s$fShow(,)_$s$fShow(,,)
                         GHC.Show.$fShow(,)1)
                      ls1
                      s1)
                   ls
                   s) -}
11f75572078c650b8a8245ef6ced8efc
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   TestUtil.$trModule3
                   TestUtil.$trModule1) -}
f702022e8b427f283afe6a138c646760
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TestUtil.$trModule2) -}
a014f971a95eec8c391d8a9e4fbe3b70
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TestUtil"#) -}
1eeb8c5d0c45a251a38a7161241e54eb
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TestUtil.$trModule4) -}
a024584d00b445b8e1c9b7833d82b576
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
6c13327beb761489007df77f9439e109
  c1Out :: GHC.Base.Maybe a
  {- HasNoCafRefs,
     Unfolding: InlineRule (0, True, True) GHC.Base.Nothing -}
c89ee5dac019832f5bc4a48b1b4ea69e
  c1l :: [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   TestUtil.c1l43
                   TestUtil.c1l1) -}
98eb8732f6495690bb37e67cd4c00fb4
  c1l1 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   TestUtil.c1l34
                   TestUtil.c1l2) -}
a9018f96eb12fd455936696705d7c79d
  c1l10 :: Defs.VNum
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Defs.VN
                   TestUtil.c1l11
                   (GHC.Types.[] @ GHC.Types.Char)) -}
e095e946bbff3a1e76491ef43cc7d28a
  c1l11 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
2481ba324c796f78aba3ecf5e875ae4c
  c1l12 :: Defs.VNum
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Defs.VN
                   TestUtil.c1l13
                   (GHC.Types.[] @ GHC.Types.Char)) -}
3c2473f214f621798d4a7ca2c643c720
  c1l13 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
4b641921625184b85f9283bb1c96d17d
  c1l14 :: Defs.VNum
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Defs.VN
                   TestUtil.c1l15
                   (GHC.Types.[] @ GHC.Types.Char)) -}
8e0938fa40ca09ff8de433c980e18015
  c1l15 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 6#) -}
458babfd9b3efe854cb3257bfa1bc887
  c1l16 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.c1l17
                   TestUtil.c1l9) -}
14b6be4896073b21356e61aebb8c8673
  c1l17 :: Defs.VNum
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Defs.VN
                   TestUtil.c1l18
                   (GHC.Types.[] @ GHC.Types.Char)) -}
488d3e4dc9ad839cb6e749a9dec8b22a
  c1l18 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3#) -}
87e563defca2ed1c0c4e5e418e0006c0
  c1l19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestUtil.c1l20) -}
23714640dec02e8361055230b01f0c39
  c1l2 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   TestUtil.c1l21
                   TestUtil.c1l3) -}
b15bf663d5e5c6b93d394d732aede1f5
  c1l20 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("vim"#) -}
cf534cdf6d89bba096f1d0bf1fadf83e
  c1l21 :: (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
  {- Strictness: m,
     Unfolding: ((TestUtil.c1l32 `cast` (Sym (Defs.N:PName[0])),
                  TestUtil.c1l22)) -}
e0d86699499900fad37d59abcad43be1
  c1l22 :: (GHC.Types.Bool, Defs.Version, Defs.Version)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.True,
                  TestUtil.c1l25 `cast` (Sym (Defs.N:Version[0])),
                  TestUtil.c1l23 `cast` (Sym (Defs.N:Version[0])))) -}
aa346e961c891252d6e03d78c3c6504f
  c1l23 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.c1l17
                   TestUtil.c1l24) -}
ff499080ec6d4cd951cee0a762d0970f
  c1l24 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.c1l14
                   (GHC.Types.[] @ Defs.VNum)) -}
7872db905baa04351985047906563cd8
  c1l25 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.c1l30
                   TestUtil.c1l26) -}
fd0b2ef57da41df09957c28961de6872
  c1l26 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.c1l30
                   TestUtil.c1l27) -}
be9ccf7c14834d342a412fde6f60c0e7
  c1l27 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.c1l28
                   (GHC.Types.[] @ Defs.VNum)) -}
51bd07ab43e60d8259b38f30a0541700
  c1l28 :: Defs.VNum
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Defs.VN
                   TestUtil.c1l29
                   (GHC.Types.[] @ GHC.Types.Char)) -}
3deadbf72c31da3d4c45ad2ca56d2316
  c1l29 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 25#) -}
a2737b93239b808fad1700b41615ddd1
  c1l3 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   TestUtil.c1l4
                   (GHC.Types.[]
                      @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version)))) -}
fa2cdb24bb96678222724a12a820a5f8
  c1l30 :: Defs.VNum
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Defs.VN
                   TestUtil.c1l31
                   (GHC.Types.[] @ GHC.Types.Char)) -}
551fee526b30135d1b2642c59be31369
  c1l31 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
8f2189a64fffc6c3ca876e401781c50f
  c1l32 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestUtil.c1l33) -}
b51c442314af471c418e0fb05b2a3b25
  c1l33 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ghc"#) -}
0af6b67262a229043cfdd3bce8b288c1
  c1l34 :: (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
  {- Strictness: m,
     Unfolding: ((TestUtil.c1l41 `cast` (Sym (Defs.N:PName[0])),
                  TestUtil.c1l35)) -}
a7c878bdab0dd9578afc52bbbd80a6c7
  c1l35 :: (GHC.Types.Bool, Defs.Version, Defs.Version)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.True,
                  TestUtil.c1l39 `cast` (Sym (Defs.N:Version[0])),
                  TestUtil.c1l36 `cast` (Sym (Defs.N:Version[0])))) -}
039ab972c9e17e68e46fcf61484c0dfe
  c1l36 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.c1l37
                   TestUtil.c1l24) -}
85a3204fdb00caac0c631582cf4a3b58
  c1l37 :: Defs.VNum
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Defs.VN
                   TestUtil.c1l38
                   (GHC.Types.[] @ GHC.Types.Char)) -}
d495af309de2ce5de259b4eb6c590387
  c1l38 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 4#) -}
3432e609fbb62f9667abdb5bd55c8634
  c1l39 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.c1l37
                   TestUtil.c1l40) -}
4f2d497c3c5a5dede26086a421ffe450
  c1l4 :: (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
  {- Strictness: m,
     Unfolding: ((TestUtil.c1l19 `cast` (Sym (Defs.N:PName[0])),
                  TestUtil.c1l5)) -}
9fe758deba5d1760b291f686855c991b
  c1l40 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.c1l30
                   (GHC.Types.[] @ Defs.VNum)) -}
63fa591e92fb506cf5a82be0a7f77795
  c1l41 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestUtil.c1l42) -}
ad1ded67a2ce95abce44c885889ae7ae
  c1l42 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("emacs"#) -}
a052eafbdbf2a15eef4d01bcf330bb0b
  c1l43 :: (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
  {- Strictness: m,
     Unfolding: ((TestUtil.c1l53 `cast` (Sym (Defs.N:PName[0])),
                  TestUtil.c1l44)) -}
76ef6076373f55a22701b6560b029d4d
  c1l44 :: (GHC.Types.Bool, Defs.Version, Defs.Version)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.True,
                  TestUtil.c1l50 `cast` (Sym (Defs.N:Version[0])),
                  TestUtil.c1l45 `cast` (Sym (Defs.N:Version[0])))) -}
cbd63b8f712d356a152cd496d41a7d79
  c1l45 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.c1l48
                   TestUtil.c1l46) -}
2924c250814ab4bbd4c53d74c29391da
  c1l46 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.c1l12
                   TestUtil.c1l47) -}
d3b4b47ef3dc25d3e0f85a11ae3e8625
  c1l47 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.c1l12
                   (GHC.Types.[] @ Defs.VNum)) -}
159c69ed617fe985d99ac31ec431cf45
  c1l48 :: Defs.VNum
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Defs.VN
                   TestUtil.c1l49
                   (GHC.Types.[] @ GHC.Types.Char)) -}
8d0ea8ceb66cf046490dc268739629d7
  c1l49 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 5#) -}
e1b700725b0898bcb9c0a07642aedb5f
  c1l5 :: (GHC.Types.Bool, Defs.Version, Defs.Version)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.True,
                  TestUtil.c1l16 `cast` (Sym (Defs.N:Version[0])),
                  TestUtil.c1l6 `cast` (Sym (Defs.N:Version[0])))) -}
bb65c813ef3dcc1f22b3e90b4639f974
  c1l50 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.c1l12
                   TestUtil.c1l51) -}
3870ab1bf3ff399a72c71ec22bab2fc3
  c1l51 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.c1l10
                   TestUtil.c1l52) -}
7c3bc3bef055309fd073bdc685885e98
  c1l52 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.c1l37
                   (GHC.Types.[] @ Defs.VNum)) -}
85f856000e24ba4fa751a55884ba2f36
  c1l53 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestUtil.c1l54) -}
7422a819f51b8b1fd573910f6ac6bd98
  c1l54 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("i3-wm"#) -}
e5bbcd44f09eb0ed8031305ff00a24ff
  c1l6 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.c1l14
                   TestUtil.c1l7) -}
93a91304930df2f2fa67c951440457ff
  c1l7 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.c1l10
                   TestUtil.c1l8) -}
4ad219797fee454fc68b8d63ee8ff3b5
  c1l8 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.c1l12
                   TestUtil.c1l9) -}
71afbb1d6fedeeff907aa6800d2f3c98
  c1l9 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.c1l10
                   (GHC.Types.[] @ Defs.VNum)) -}
1e8bc39509201d92a9288c20f6c3d51e
  c1r :: [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   TestUtil.c1r26
                   TestUtil.c1r1) -}
6f334c679b4fe3cc693f6c25881a512d
  c1r1 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   TestUtil.c1r22
                   TestUtil.c1r2) -}
f9f3e76134f97cc68fffeb57d5423fe1
  c1r10 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.c1l30
                   TestUtil.c1r11) -}
ce953215292c2c4b329be9ceb33dd6c1
  c1r11 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.c1l17
                   (GHC.Types.[] @ Defs.VNum)) -}
2cfb819fd2389e56ffdb378d737ea65b
  c1r12 :: (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
  {- Strictness: m,
     Unfolding: ((TestUtil.c1r20 `cast` (Sym (Defs.N:PName[0])),
                  TestUtil.c1r13)) -}
8cf9877d77a4eece4db6ccf5ffa7f73f
  c1r13 :: (GHC.Types.Bool, Defs.Version, Defs.Version)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.True,
                  TestUtil.c1r18 `cast` (Sym (Defs.N:Version[0])),
                  TestUtil.c1r14 `cast` (Sym (Defs.N:Version[0])))) -}
c1c73be081da5496a65b7ac9e531de09
  c1r14 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.c1l48
                   TestUtil.c1r15) -}
ae68b0cf719900f33e5af2ebe3e6d1f3
  c1r15 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.c1r16
                   (GHC.Types.[] @ Defs.VNum)) -}
28b77ea46a4cabd4d1caf373b8669b6c
  c1r16 :: Defs.VNum
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Defs.VN
                   TestUtil.c1r17
                   (GHC.Types.[] @ GHC.Types.Char)) -}
448668c5faaefd83924d52abe9e46164
  c1r17 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 8#) -}
2b493c4c8c1852be6fd5f0754c15c22c
  c1r18 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.c1l37
                   TestUtil.c1r19) -}
36cc8c693aa295667f472144aeb391e3
  c1r19 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.c1l30
                   TestUtil.c1l40) -}
b3de69b956b0c33359e76fea31165b8d
  c1r2 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   TestUtil.c1r12
                   TestUtil.c1r3) -}
112bfb90d3e2070b96f7f91a194e93e2
  c1r20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestUtil.c1r21) -}
1e24756436967275c810d0c474f04a2a
  c1r21 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("mono"#) -}
2acf848bb4addca55b51cb5352dbac0d
  c1r22 :: (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
  {- Strictness: m,
     Unfolding: ((TestUtil.c1l41 `cast` (Sym (Defs.N:PName[0])),
                  TestUtil.c1r23)) -}
2e69d702ca431647be4cae9b728db7f4
  c1r23 :: (GHC.Types.Bool, Defs.Version, Defs.Version)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.True,
                  TestUtil.c1r25 `cast` (Sym (Defs.N:Version[0])),
                  TestUtil.c1r24 `cast` (Sym (Defs.N:Version[0])))) -}
de6d4188c513c1ebd4080bf578adae55
  c1r24 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.c1l37
                   TestUtil.c1r11) -}
e6abb3a8e1799e76d2851edbe8a77696
  c1r25 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.c1l12
                   TestUtil.c1r11) -}
d72eb88532de6b146faa362a8f56aa3c
  c1r26 :: (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
  {- Strictness: m,
     Unfolding: ((TestUtil.c1r33 `cast` (Sym (Defs.N:PName[0])),
                  TestUtil.c1r27)) -}
e0277e2bae49dde2e7c13ff485c84933
  c1r27 :: (GHC.Types.Bool, Defs.Version, Defs.Version)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.True,
                  TestUtil.c1r32 `cast` (Sym (Defs.N:Version[0])),
                  TestUtil.c1r28 `cast` (Sym (Defs.N:Version[0])))) -}
7e37a3c332f5e9014c8ebf10b8180ea5
  c1r28 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.c1r30
                   TestUtil.c1r29) -}
79f22d3a16f19a1545b85824986cb373
  c1r29 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.c1l10
                   TestUtil.c1l9) -}
b662a94a025d03a475f23f7ac5f45c13
  c1r3 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   TestUtil.c1r4
                   (GHC.Types.[]
                      @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version)))) -}
5c3c8a8393400f861bdf2d29eeef509b
  c1r30 :: Defs.VNum
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Defs.VN
                   TestUtil.c1r31
                   (GHC.Types.[] @ GHC.Types.Char)) -}
d412f18ebe81f61d960a9f1661248056
  c1r31 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 9#) -}
765cf8eccd965a4efd6cd774753614ac
  c1r32 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.c1r7
                   TestUtil.c1l47) -}
50116c2bea6b84fbff82d1b74a187356
  c1r33 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestUtil.c1r34) -}
8b14c5c594d4716e327077fb852b97cf
  c1r34 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("uxterm"#) -}
db89cb3bbc2b4eb6323c99868b4cdcd7
  c1r4 :: (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
  {- Strictness: m,
     Unfolding: ((TestUtil.c1l19 `cast` (Sym (Defs.N:PName[0])),
                  TestUtil.c1r5)) -}
682c3e8daeda521c5ee65106fa95dbdc
  c1r5 :: (GHC.Types.Bool, Defs.Version, Defs.Version)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.True,
                  TestUtil.c1r9 `cast` (Sym (Defs.N:Version[0])),
                  TestUtil.c1r6 `cast` (Sym (Defs.N:Version[0])))) -}
9e78f3cc0eb91bd615500a8356dac368
  c1r6 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.: @ Defs.VNum TestUtil.c1r7 TestUtil.c1l7) -}
7cdfa02396642b77d730b6de0ff5547d
  c1r7 :: Defs.VNum
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Defs.VN
                   TestUtil.c1r8
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0db4a0e3fbe02ca7433c6d94c6473657
  c1r8 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 7#) -}
4257bde7edfa06776834547fb75e52e9
  c1r9 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.c1l14
                   TestUtil.c1r10) -}
6ac84f01e6aebab1fa255bcb74adef49
  c2Out ::
    GHC.Base.Maybe
      [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
                   TestUtil.c2Out1) -}
3383111e6027d26038dd64abf8b36a1b
  c2Out1 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   TestUtil.c1l43
                   TestUtil.c2Out2) -}
6bf18b235286226b9b6d350bad715f78
  c2Out10 ::
    (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
  {- Strictness: m,
     Unfolding: ((TestUtil.c1l41 `cast` (Sym (Defs.N:PName[0])),
                  TestUtil.c2Out11)) -}
446caba4d7c2ee018fa04c7221e77ddc
  c2Out11 :: (GHC.Types.Bool, Defs.Version, Defs.Version)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.True,
                  TestUtil.c1l39 `cast` (Sym (Defs.N:Version[0])),
                  TestUtil.c1r24 `cast` (Sym (Defs.N:Version[0])))) -}
1b2743f2fb4159dbafcdce6c8a89257a
  c2Out2 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   TestUtil.c2Out10
                   TestUtil.c2Out3) -}
d5e3469b0cdaa78c6497c6ae6339b704
  c2Out3 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   TestUtil.c1l21
                   TestUtil.c2Out4) -}
c8bf8aa64ee7e9040b1c9b5a26d99de5
  c2Out4 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   TestUtil.c2Out7
                   TestUtil.c2Out5) -}
f30c3657830627c49104061df66c5f7b
  c2Out5 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   TestUtil.c1r26
                   TestUtil.c2Out6) -}
b92334fd319bad923bf23cd09a5553b4
  c2Out6 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   TestUtil.c1r12
                   (GHC.Types.[]
                      @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version)))) -}
dc61da3c6662241ffa5902404b88347f
  c2Out7 ::
    (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
  {- Strictness: m,
     Unfolding: ((TestUtil.c1l19 `cast` (Sym (Defs.N:PName[0])),
                  TestUtil.c2Out8)) -}
55b76644542eec24cf8359c69dd5cfbd
  c2Out8 :: (GHC.Types.Bool, Defs.Version, Defs.Version)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.True,
                  TestUtil.c2Out9 `cast` (Sym (Defs.N:Version[0])),
                  TestUtil.c1l6 `cast` (Sym (Defs.N:Version[0])))) -}
5a0e0670b1ded03cf3cce0295e45122b
  c2Out9 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.c1l48
                   TestUtil.c1r10) -}
a40760f1501d667819c77f4414eb0d50
  c2l :: [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   TestUtil.c1l43
                   TestUtil.c2l1) -}
5ee9e6872515116b17f93c5f4e4a1ddf
  c2l1 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   TestUtil.c1l34
                   TestUtil.c2l2) -}
9851969addf6e65dda7f604be89e3a25
  c2l2 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   TestUtil.c1l21
                   TestUtil.c2l3) -}
6b32846c75c87a7139fb63abdd6b1d24
  c2l3 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   TestUtil.c2l4
                   (GHC.Types.[]
                      @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version)))) -}
183a2e1a89ae1e97c0a66155266dde1a
  c2l4 :: (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
  {- Strictness: m,
     Unfolding: ((TestUtil.c1l19 `cast` (Sym (Defs.N:PName[0])),
                  TestUtil.c2l5)) -}
326088d73a82550f653acf8bce30a90d
  c2l5 :: (GHC.Types.Bool, Defs.Version, Defs.Version)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.False,
                  TestUtil.c1l16 `cast` (Sym (Defs.N:Version[0])),
                  TestUtil.c1l6 `cast` (Sym (Defs.N:Version[0])))) -}
7077c866d90b8743df62b4b83768674f
  c2r :: [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   TestUtil.c1r26
                   TestUtil.c2r1) -}
e64790b85dbad45ea3c441e84bdadb90
  c2r1 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   TestUtil.c2r6
                   TestUtil.c2r2) -}
8d7525ac2d6dcfc2c57df6f39662dcd6
  c2r2 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   TestUtil.c1r12
                   TestUtil.c2r3) -}
2e899f7399a6e691f1e4ce931c51f50a
  c2r3 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   TestUtil.c2r4
                   (GHC.Types.[]
                      @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version)))) -}
93a6443ab1c4818ec6755809df7ea66f
  c2r4 :: (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
  {- Strictness: m,
     Unfolding: ((TestUtil.c1l19 `cast` (Sym (Defs.N:PName[0])),
                  TestUtil.c2r5)) -}
c6608d8cf8b827504873316999486baa
  c2r5 :: (GHC.Types.Bool, Defs.Version, Defs.Version)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.True,
                  TestUtil.c2Out9 `cast` (Sym (Defs.N:Version[0])),
                  TestUtil.c1r6 `cast` (Sym (Defs.N:Version[0])))) -}
20d33025d3676095c3e32170f5b41204
  c2r6 :: (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
  {- Strictness: m,
     Unfolding: ((TestUtil.c1l41 `cast` (Sym (Defs.N:PName[0])),
                  TestUtil.c2r7)) -}
7a8c6a8da0d881e7c58d2bd8e8b02f25
  c2r7 :: (GHC.Types.Bool, Defs.Version, Defs.Version)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.False,
                  TestUtil.c1r25 `cast` (Sym (Defs.N:Version[0])),
                  TestUtil.c1r24 `cast` (Sym (Defs.N:Version[0])))) -}
8ea66659b7515617ede7a3b60a04c2b5
  c3Out :: GHC.Base.Maybe a
  {- HasNoCafRefs,
     Unfolding: InlineRule (0, True, True) GHC.Base.Nothing -}
62e13b256bd4a36e712062d21eeef7c1
  c3l :: [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   TestUtil.c1l43
                   TestUtil.c3l1) -}
582567309881b895b273f0364bee4c67
  c3l1 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   TestUtil.c1l34
                   TestUtil.c3l2) -}
ac533cd10b431519e568d74b40b5d4c8
  c3l2 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   TestUtil.c1l21
                   TestUtil.c3l3) -}
505c7484f727f0cf99d55734f5ab7e4c
  c3l3 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   TestUtil.c3l4
                   (GHC.Types.[]
                      @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version)))) -}
fdc7728c95af6912eba59ba0b9df625d
  c3l4 :: (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
  {- Strictness: m,
     Unfolding: ((TestUtil.c1l19 `cast` (Sym (Defs.N:PName[0])),
                  TestUtil.c3l5)) -}
a2068a44d87ca37f3366394859dad257
  c3l5 :: (GHC.Types.Bool, Defs.Version, Defs.Version)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.False,
                  TestUtil.c1l8 `cast` (Sym (Defs.N:Version[0])),
                  TestUtil.c3l6 `cast` (Sym (Defs.N:Version[0])))) -}
79258c25806f68a0a79994939b775118
  c3l6 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.c1l17
                   TestUtil.c1l7) -}
d270d54b3cd28f5526942bfec71865d4
  c3r :: [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   TestUtil.c1r26
                   TestUtil.c3r1) -}
526618d10bf4529d9e48df47fe5a2c4a
  c3r1 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   TestUtil.c1r22
                   TestUtil.c3r2) -}
a4cc5e987f3d42aa2b7afd7d41219b0e
  c3r2 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   TestUtil.c1r12
                   TestUtil.c3r3) -}
6050db0286a5845d96714fc54c781de5
  c3r3 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   TestUtil.c3r4
                   (GHC.Types.[]
                      @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version)))) -}
bca245ee4fee14658a3ae3b54d6889fe
  c3r4 :: (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
  {- Strictness: m,
     Unfolding: ((TestUtil.c1l19 `cast` (Sym (Defs.N:PName[0])),
                  TestUtil.c3r5)) -}
f78da977ea1112c5829dee07f84e49f1
  c3r5 :: (GHC.Types.Bool, Defs.Version, Defs.Version)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.True,
                  TestUtil.c3r7 `cast` (Sym (Defs.N:Version[0])),
                  TestUtil.c3r6 `cast` (Sym (Defs.N:Version[0])))) -}
5959670f251976fcb7166dda7016b966
  c3r6 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.c1l48
                   TestUtil.c1l7) -}
2ffbae2691a8229d90e5421d2f817742
  c3r7 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.c1l37
                   TestUtil.c1r10) -}
29430d7ec8f5d70df352f50fe9adab3b
  c4Out ::
    GHC.Base.Maybe
      [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
                   TestUtil.c4Out1) -}
8d59087deb7958dc4bf97b5b818fabe2
  c4Out1 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   TestUtil.c1l43
                   TestUtil.c4Out2) -}
b379ea7ca8715d4c75cfa98e4d56400a
  c4Out2 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   TestUtil.c4Out3
                   TestUtil.c2Out3) -}
a80f3d4876c4aff47d806b2ca42d5c09
  c4Out3 ::
    (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
  {- Strictness: m,
     Unfolding: ((TestUtil.c1l41 `cast` (Sym (Defs.N:PName[0])),
                  TestUtil.c4Out4)) -}
184adcb11fcb78b79b3e3c97f68c98ef
  c4Out4 :: (GHC.Types.Bool, Defs.Version, Defs.Version)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.False,
                  TestUtil.c4Out6 `cast` (Sym (Defs.N:Version[0])),
                  TestUtil.c4Out5 `cast` (Sym (Defs.N:Version[0])))) -}
ef653cbe5642f7803e6bc5dd1908fe90
  c4Out5 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.c1l37
                   TestUtil.c1l47) -}
6c40768dd655cca93efb1c27db720d53
  c4Out6 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.c1l17
                   TestUtil.c1l40) -}
34324766f12ac95cfade80281b24bed5
  c4l :: [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   TestUtil.c1l43
                   TestUtil.c4l1) -}
2dde361024e18aa2262a7db074e4508f
  c4l1 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   TestUtil.c4l2
                   TestUtil.c2l2) -}
e4e775e3f7f792cf5f8cf378fb646f88
  c4l2 :: (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
  {- Strictness: m,
     Unfolding: ((TestUtil.c1l41 `cast` (Sym (Defs.N:PName[0])),
                  TestUtil.c4l3)) -}
7b980f7778bc31498ea63541e95c2247
  c4l3 :: (GHC.Types.Bool, Defs.Version, Defs.Version)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.False,
                  TestUtil.c4Out6 `cast` (Sym (Defs.N:Version[0])),
                  TestUtil.c1l36 `cast` (Sym (Defs.N:Version[0])))) -}
4d1d45d4a5c55c7d8e9f3f448ed3b369
  c4r :: [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   TestUtil.c1r26
                   TestUtil.c4r1) -}
3a4f0563940157edeb9b5125953ae365
  c4r1 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   TestUtil.c4r2
                   TestUtil.c2r2) -}
ed73462bca810e39b1d54ff46e4875b4
  c4r2 :: (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
  {- Strictness: m,
     Unfolding: ((TestUtil.c1l41 `cast` (Sym (Defs.N:PName[0])),
                  TestUtil.c4r3)) -}
eca731738ed8478c68641497c8adb6c7
  c4r3 :: (GHC.Types.Bool, Defs.Version, Defs.Version)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.False,
                  TestUtil.c1r25 `cast` (Sym (Defs.N:Version[0])),
                  TestUtil.c4Out5 `cast` (Sym (Defs.N:Version[0])))) -}
1ad832e277f111921b1bf41bf7c40371
  c5Out :: GHC.Base.Maybe a
  {- HasNoCafRefs,
     Unfolding: InlineRule (0, True, True) GHC.Base.Nothing -}
a7e5e07638e5d776de48a80c4c9bf985
  c5l :: [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   TestUtil.c1l43
                   TestUtil.c5l1) -}
2297a4447e7ec87413619d1cd194801a
  c5l1 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   TestUtil.c5l2
                   TestUtil.c2l2) -}
3d1ff34a6a508541e7f36ace237f3a94
  c5l2 :: (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
  {- Strictness: m,
     Unfolding: ((TestUtil.c1l41 `cast` (Sym (Defs.N:PName[0])),
                  TestUtil.c5l3)) -}
b24099c7a470c2ad50bd34d89853a2f9
  c5l3 :: (GHC.Types.Bool, Defs.Version, Defs.Version)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.False,
                  TestUtil.c1r19 `cast` (Sym (Defs.N:Version[0])),
                  TestUtil.c5l4 `cast` (Sym (Defs.N:Version[0])))) -}
57167e0881f5fc52b5c98f2c02d8adf8
  c5l4 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.c1l12
                   TestUtil.c1l24) -}
b793ce32084995b29e7483e63c471b38
  c5r :: [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   TestUtil.c1r26
                   TestUtil.c5r1) -}
13aff635892b5a197714ba199aa620f4
  c5r1 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   TestUtil.c5r2
                   TestUtil.c2r2) -}
619b9def09d6e129837b87c839b1334e
  c5r2 :: (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
  {- Strictness: m,
     Unfolding: ((TestUtil.c1l41 `cast` (Sym (Defs.N:PName[0])),
                  TestUtil.c5r3)) -}
623de687c96211cedf53bd31a8964c49
  c5r3 :: (GHC.Types.Bool, Defs.Version, Defs.Version)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.False,
                  TestUtil.c5r4 `cast` (Sym (Defs.N:Version[0])),
                  TestUtil.c1r24 `cast` (Sym (Defs.N:Version[0])))) -}
12bcf4301578ecfc408c4695a809a159
  c5r4 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.c1l12
                   TestUtil.c5r5) -}
7fcebe2665cdb0c34d06811d199f1ec4
  c5r5 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.c1r30
                   (GHC.Types.[] @ Defs.VNum)) -}
cdcc8a4ef7ad23768e32c5903a51cf59
  listToVersion :: [(GHC.Types.Int, GHC.Base.String)] -> Defs.Version
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                TestUtil.listToVersion1
                  `cast`
                (<[(GHC.Types.Int, GHC.Base.String)]>_R
                 ->_R Sym (Defs.N:Version[0])) -}
82c4d6b7ca32e567310dc636aa91ecb3
  listToVersion1 :: [(GHC.Types.Int, GHC.Base.String)] -> [Defs.VNum]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [(GHC.Types.Int, GHC.Base.String)]) ->
                 GHC.Base.build
                   @ Defs.VNum
                   (\ @ b1 (c :: Defs.VNum -> b1 -> b1)[OneShot] (n :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ (GHC.Types.Int, GHC.Base.String)
                      @ b1
                      (GHC.Base.mapFB
                         @ Defs.VNum
                         @ b1
                         @ (GHC.Types.Int, GHC.Base.String)
                         c
                         TestUtil.listToVersion2)
                      n
                      x)) -}
3766a3878518b95224ea20512a245992
  listToVersion2 :: (GHC.Types.Int, GHC.Base.String) -> Defs.VNum
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(1*U,1*U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (p :: (GHC.Types.Int, GHC.Base.String)) ->
                 Defs.VN
                   (case p of wild { (,) x ds -> x })
                   (case p of wild { (,) ds y -> y })) -}
f6e2902382bae8526a958e217de2a199
  tests :: Test.Tasty.Core.TestTree
  {- Strictness: m2,
     Unfolding: (Test.Tasty.Core.TestGroup
                   TestUtil.tests121
                   TestUtil.tests1) -}
549e5d3c7c44be269685a0295edca59d
  tests1 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   TestUtil.tests30
                   TestUtil.tests2) -}
aa6519413d13df07a0ab0db541b6119e
  tests10 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case TestUtil.tests_eta of wild {
                   GHC.Base.Nothing -> (# s, GHC.Types.[] @ GHC.Types.Char #)
                   GHC.Base.Just a1
                   -> case TestUtil.tests11 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {} }) -}
0ebfe0d44e9606e45d9eb5a8a10dd0bd
  tests100 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("1.0 > 1.0.0"#) -}
e9885dac2c6b299c5d8c106c99d4d022
  tests101 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   TestUtil.tests99
                   TestUtil.tests102
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
6a19c944e9f5c947cc5b6c27ad4707d9
  tests102 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case TestUtil.tests_eta6 of wild {
                   GHC.Types.False -> (# s, GHC.Types.[] @ GHC.Types.Char #)
                   GHC.Types.True
                   -> case TestUtil.tests103 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {} }) -}
7db913053982a08fc0d75c2a6f280c9e
  tests103 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
f39b6cf1f68f64558ef0f428da79cde7
  tests104 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   TestUtil.tests107
                   TestUtil.tests105
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
c8a6988951f1134182822c3729915311
  tests105 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Defs.VNum
                        Defs.$fOrdVNum
                        TestUtil.tests60
                        TestUtil.tests71 of wild {
                   DEFAULT
                   -> case TestUtil.tests106 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {}
                   GHC.Types.GT -> (# s, GHC.Types.[] @ GHC.Types.Char #) }) -}
baf7a69b88da56288a9ae49cd2fd87c0
  tests106 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
5f5e8d9a74e07534474c7d6a12ac379e
  tests107 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestUtil.tests108) -}
c84df512b05fa4b5c71ef9f389aed1ed
  tests108 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("1.0.0 > 1.0"#) -}
78c332e24390d913be9d95bd98d52a6f
  tests109 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   TestUtil.tests112
                   TestUtil.tests110
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
73c6defb6be1c1645d9196d733e5d367
  tests11 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
e59e0eae9ac1791fcf0acbaacd080078
  tests110 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Defs.VNum
                        Defs.$fOrdVNum
                        TestUtil.tests71
                        TestUtil.tests60 of wild {
                   DEFAULT -> (# s, GHC.Types.[] @ GHC.Types.Char #)
                   GHC.Types.GT
                   -> case TestUtil.tests111 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {} }) -}
d4f8e6efdf2c26614e18bb6d44bb25ed
  tests111 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
58b57a3455a5ab90ebe9afdde2446dd0
  tests112 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestUtil.tests113) -}
fc29ee3452d67512edf0b69b493804ba
  tests113 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("1.0 <= 1.0.0"#) -}
9e136d58d8e4f66f10af17a172e6972c
  tests114 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   TestUtil.tests117
                   TestUtil.tests115
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
d104e62d24a8d7b1556bb9eed5fdac0b
  tests115 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case TestUtil.tests_eta7 of wild {
                   GHC.Types.False -> (# s, GHC.Types.[] @ GHC.Types.Char #)
                   GHC.Types.True
                   -> case TestUtil.tests116 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {} }) -}
de9d6eab397a5a46ce44d259080481ba
  tests116 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
7f54f6fe5218824f48ca45814ce0ccdc
  tests117 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestUtil.tests118) -}
fa9cb1676b4904c6b95ee946f5e1fbc9
  tests118 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("1.0.0 <= 1.0"#) -}
6abe8413e1294880694ffce0d5e25fb7
  tests119 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestUtil.tests120) -}
ee1a83ac8ed09184136fed826290a36f
  tests12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestUtil.tests13) -}
fbb042ecc58e3b8d6ae9d80c5b150066
  tests120 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Version comparison"#) -}
755f41e43be9518891f7a440f9b0ae75
  tests121 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestUtil.tests122) -}
3806b6d57f52b2b47cfd0b59c20e4a65
  tests122 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Util tests"#) -}
fdfede64c8c8dbebcf335d54560962a6
  tests13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("4 + 4 : Nothing"#) -}
4904abe4ac26c2fe5ed03bdd2aaabb4b
  tests14 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   TestUtil.tests17
                   TestUtil.tests15
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
bfb6da7615ab46fa46a407536030daf6
  tests15 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case TestUtil.tests_eta1 of wild {
                   GHC.Base.Nothing
                   -> case TestUtil.tests16 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {}
                   GHC.Base.Just a1
                   -> case GHC.Classes.$fEq[]_$c==
                             @ (Defs.PName, Defs.PConstr)
                             Defs.$fEqPkg_$s$fEq(,)
                             a1
                             TestUtil.c4Out1 of wild1 {
                        GHC.Types.False
                        -> case TestUtil.tests16 s
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                           of {}
                        GHC.Types.True -> (# s, GHC.Types.[] @ GHC.Types.Char #) } }) -}
ac4c1ea310d9cd650171b12fc4d3bc83
  tests16 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
52e4ca531a5db81897b6e42a7691ea2b
  tests17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestUtil.tests18) -}
9c92f2dc1dad8c1bfa97f54767c9e461
  tests18 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("4 + 4 : Just"#) -}
314bc5cca140dc0679ab07cc4b41538e
  tests19 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   TestUtil.tests12
                   TestUtil.tests20
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
4709b374d76df771a2f0c20c8657d64b
  tests2 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   TestUtil.tests3
                   (GHC.Types.[] @ Test.Tasty.Core.TestTree)) -}
730262d4369f5f7d4113c01660d49b8c
  tests20 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case TestUtil.tests_eta2 of wild {
                   GHC.Base.Nothing -> (# s, GHC.Types.[] @ GHC.Types.Char #)
                   GHC.Base.Just a1
                   -> case TestUtil.tests21 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {} }) -}
89e220db5e4163c914716a0a72c0c3a4
  tests21 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
fee7140e3574c18f886fef75966a4d97
  tests22 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   TestUtil.tests17
                   TestUtil.tests23
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
850e437e8a4b1934f1e08232daf39328
  tests23 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case TestUtil.tests_eta3 of wild {
                   GHC.Base.Nothing
                   -> case TestUtil.tests24 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {}
                   GHC.Base.Just a1
                   -> case GHC.Classes.$fEq[]_$c==
                             @ (Defs.PName, Defs.PConstr)
                             Defs.$fEqPkg_$s$fEq(,)
                             a1
                             TestUtil.c2Out1 of wild1 {
                        GHC.Types.False
                        -> case TestUtil.tests24 s
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                           of {}
                        GHC.Types.True -> (# s, GHC.Types.[] @ GHC.Types.Char #) } }) -}
c598d067a5100dceab0c3746748045af
  tests24 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
d3d12a1af79c98305802c1d9203843af
  tests25 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   TestUtil.tests12
                   TestUtil.tests26
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
d6a4fee7951267ffb00c1c985f970915
  tests26 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case TestUtil.tests_eta4 of wild {
                   GHC.Base.Nothing -> (# s, GHC.Types.[] @ GHC.Types.Char #)
                   GHC.Base.Just a1
                   -> case TestUtil.tests27 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {} }) -}
57fe6c3d1bba7867e8ba8a898360db9d
  tests27 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
9243f8c475a39785fd478061d24af7c1
  tests28 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestUtil.tests29) -}
168689a8ba88294f12bfd784b075824e
  tests29 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Merging constraints"#) -}
c94041338b3e2ce46139c950b8b6a97c
  tests3 :: Test.Tasty.Core.TestTree
  {- Strictness: m2,
     Unfolding: (Test.Tasty.Core.TestGroup
                   TestUtil.tests28
                   TestUtil.tests4) -}
d6d2dec0a0ddb483a9f831e1dab61617
  tests30 :: Test.Tasty.Core.TestTree
  {- Strictness: m2,
     Unfolding: (Test.Tasty.Core.TestGroup
                   TestUtil.tests119
                   TestUtil.tests31) -}
4cbc4038a6f06facf1641f711ff86cab
  tests31 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   TestUtil.tests114
                   TestUtil.tests32) -}
497fc74a571864650e4f23c89d729736
  tests32 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   TestUtil.tests109
                   TestUtil.tests33) -}
6a83a6008d5466b709d6f31145793f9a
  tests33 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   TestUtil.tests104
                   TestUtil.tests34) -}
f1449fce3134e1825e93b3a820a8861e
  tests34 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   TestUtil.tests101
                   TestUtil.tests35) -}
754654f9aa099d339f149b7c141092b2
  tests35 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   TestUtil.tests96
                   TestUtil.tests36) -}
b76930d03c249b2840ad65022d5ef5bc
  tests36 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   TestUtil.tests91
                   TestUtil.tests37) -}
76db531aaf89ba70306d31b821f5170c
  tests37 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   TestUtil.tests85
                   TestUtil.tests38) -}
8653cfcfa945126ec65c559d6bfcd2da
  tests38 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   TestUtil.tests74
                   TestUtil.tests39) -}
7b30adddaf8ab24ad034306ebf7ad01d
  tests39 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   TestUtil.tests68
                   TestUtil.tests40) -}
5d8b29759f4c4cad100b774942172870
  tests4 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   TestUtil.tests25
                   TestUtil.tests5) -}
ad8bce561b4eb776fdbd1e7f82e6e614
  tests40 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   TestUtil.tests57
                   TestUtil.tests41) -}
0fa4d1a5e14b2615740b6a8361e70515
  tests41 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   TestUtil.tests42
                   (GHC.Types.[] @ Test.Tasty.Core.TestTree)) -}
be9acb9747b56d194615dcf425dffbd5
  tests42 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   TestUtil.tests55
                   TestUtil.tests43
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
60f4440578d6a04e60cba4ad5956b16a
  tests43 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case TestUtil.tests_eta5 of wild {
                   GHC.Types.False -> (# s, GHC.Types.[] @ GHC.Types.Char #)
                   GHC.Types.True
                   -> case TestUtil.tests44 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {} }) -}
6e9ff567c52eedd38a0511b6cff47995
  tests44 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
9da3acfa0e9296ee2ebd47f19a052290
  tests45 :: [Defs.VNum]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.c1l17
                   TestUtil.tests46) -}
a85f091bfc475883799931c3f2327f69
  tests46 :: [Defs.VNum]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.tests47
                   (GHC.Types.[] @ Defs.VNum)) -}
150df1319577f86fa344906d4a2c1c17
  tests47 :: Defs.VNum
  {- Strictness: m,
     Unfolding: (Defs.VN TestUtil.c1l49 TestUtil.tests48) -}
fe4f2380ef900aadfd43b34e220d2f43
  tests48 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestUtil.tests49) -}
7986e616f8684255b654563c9bff3d59
  tests49 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("a"#) -}
6272298054ba40c3265e62bd2a589699
  tests5 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   TestUtil.tests22
                   TestUtil.tests6) -}
d0d3ac6cfe48e193a01ae67807ef6a2d
  tests50 :: [Defs.VNum]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.c1l17
                   TestUtil.tests51) -}
7fca3a8b37e015026f326d6961d31e97
  tests51 :: [Defs.VNum]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.tests52
                   (GHC.Types.[] @ Defs.VNum)) -}
b931c5c6f4fc46c1970146aeb6086d3c
  tests52 :: Defs.VNum
  {- Strictness: m,
     Unfolding: (Defs.VN TestUtil.c1l38 TestUtil.tests53) -}
9d5b01d4d723578d582fd811f55ef127
  tests53 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestUtil.tests54) -}
8202de9cf313a58aaad38f2b91981af7
  tests54 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("z"#) -}
21f4b9313a6ce2d50eff5a046cfafa9c
  tests55 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestUtil.tests56) -}
9c935a2ee921d93f78bd27601d75e9fc
  tests56 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("3.4z > 3.5a"#) -}
81a28777d5d36f16a4bb2dcdcc72038a
  tests57 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   TestUtil.tests66
                   TestUtil.tests58
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
5b7b5f663134f88ee1b00e1639ec6774
  tests58 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Defs.VNum
                        Defs.$fOrdVNum
                        TestUtil.tests61
                        TestUtil.tests60 of wild {
                   DEFAULT
                   -> case TestUtil.tests59 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {}
                   GHC.Types.GT -> (# s, GHC.Types.[] @ GHC.Types.Char #) }) -}
761b9a5f11162f879383438c1e1f8b3c
  tests59 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
db8d4ef134a964ee95bb8a65b44dcefa
  tests6 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   TestUtil.tests19
                   TestUtil.tests7) -}
e622730e1851f5e2c8bb0e90093f177d
  tests60 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.c1l30
                   TestUtil.c1r29) -}
c8e1614c4447c62a5ee1b49b2a4f6e8d
  tests61 :: [Defs.VNum]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.c1l30
                   TestUtil.tests62) -}
b5d512998e8517ca9e28c48d5f1dba8c
  tests62 :: [Defs.VNum]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.tests63
                   TestUtil.c1l9) -}
52297dc7e2285a13db0540f90b808f75
  tests63 :: Defs.VNum
  {- Strictness: m,
     Unfolding: (Defs.VN TestUtil.c1l11 TestUtil.tests64) -}
88762d7c113eeada0cc8a193a3649d25
  tests64 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestUtil.tests65) -}
758760282280b8d96399346a85e45a6e
  tests65 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("oh"#) -}
085234308c45934b59d1dc948a8d99f6
  tests66 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestUtil.tests67) -}
932770df5af234d4dd901da418d4573d
  tests67 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("1.0oh.0 > 1.0.0"#) -}
28204ef87904c7cfe68e9ba86683c9e6
  tests68 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   TestUtil.tests72
                   TestUtil.tests69
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
35d86e36c7f132fd50b965566c834e67
  tests69 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Defs.VNum
                        Defs.$fOrdVNum
                        TestUtil.tests61
                        TestUtil.tests71 of wild {
                   DEFAULT
                   -> case TestUtil.tests70 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {}
                   GHC.Types.GT -> (# s, GHC.Types.[] @ GHC.Types.Char #) }) -}
443a6a1f37a0694b4ca56fabdbed6a26
  tests7 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   TestUtil.tests14
                   TestUtil.tests8) -}
8089774775141858380670b773da50b8
  tests70 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
d786cb7374e4a443601c1a9c5fab7f7f
  tests71 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.c1l30
                   TestUtil.c1l9) -}
b0fb6ca3154a4fa3f3745f7e1556c2dd
  tests72 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestUtil.tests73) -}
380099da79173c928cf45eb0d71abce5
  tests73 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("1.0oh.0 > 1.0"#) -}
b65be398ef9dbdfd66e62d7cc136641f
  tests74 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   TestUtil.tests83
                   TestUtil.tests75
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
4d6a4b775e994d3c36cbff5381acbdad
  tests75 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Defs.VNum
                        Defs.$fOrdVNum
                        TestUtil.tests77
                        TestUtil.c1l8 of wild {
                   DEFAULT
                   -> case TestUtil.tests76 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {}
                   GHC.Types.GT -> (# s, GHC.Types.[] @ GHC.Types.Char #) }) -}
fb7d4ee3dbb883a69d84fb7449964f48
  tests76 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
270009f1447d750161aacd4250dbe43a
  tests77 :: [Defs.VNum]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.c1l12
                   TestUtil.tests78) -}
156afb9550810692f93033073bb9b409
  tests78 :: [Defs.VNum]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.c1l10
                   TestUtil.tests79) -}
a6376cd926d4ec4b6dc55ce098bd0688
  tests79 :: [Defs.VNum]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.tests80
                   (GHC.Types.[] @ Defs.VNum)) -}
c4ae38fc40c7123de2b95d41d550ccd9
  tests8 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   TestUtil.tests9
                   (GHC.Types.[] @ Test.Tasty.Core.TestTree)) -}
325a5965f27ac1ee8e472e647999e5e1
  tests80 :: Defs.VNum
  {- Strictness: m,
     Unfolding: (Defs.VN TestUtil.c1l11 TestUtil.tests81) -}
b181cc147804819a9a6ee0d9cd814f44
  tests81 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestUtil.tests82) -}
329468fcaebb123f91eb88f1487e1705
  tests82 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("wow"#) -}
8d60b9d052fd59567da662ac5d1f00d8
  tests83 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestUtil.tests84) -}
6f234d5804481d20fe664ec96034a76e
  tests84 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("2.0.0wow > 2.0"#) -}
1a3ca75f8eedd9872f55e734890010cd
  tests85 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   TestUtil.tests89
                   TestUtil.tests86
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
c1ada72cbffbc378bed35d3341057284
  tests86 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Defs.VNum
                        Defs.$fOrdVNum
                        TestUtil.tests88
                        TestUtil.tests77 of wild {
                   DEFAULT -> (# s, GHC.Types.[] @ GHC.Types.Char #)
                   GHC.Types.GT
                   -> case TestUtil.tests87 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {} }) -}
381451bac33e2fdd4abef6262232ef8f
  tests87 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
a7812f4885a38975e32a96a19e493694
  tests88 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestUtil.c1l12
                   TestUtil.c1r29) -}
72321ac7a047d305c285c158ee343fc4
  tests89 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestUtil.tests90) -}
5be94b55812b197d97072a7fd4a17bae
  tests9 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   TestUtil.tests12
                   TestUtil.tests10
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
06d6f89c9a9eaeba518a68d51de66d30
  tests90 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("2.0.0 <= 2.0.0wow"#) -}
fbf088eb84ddd0fa6458e9f504d7130f
  tests91 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   TestUtil.tests94
                   TestUtil.tests92
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
f842ac1a9a662edcddea0ae969c7d4f1
  tests92 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Defs.VNum
                        Defs.$fOrdVNum
                        TestUtil.tests60
                        TestUtil.c1l8 of wild {
                   DEFAULT -> (# s, GHC.Types.[] @ GHC.Types.Char #)
                   GHC.Types.GT
                   -> case TestUtil.tests93 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {} }) -}
61be027e1fbc042d2a3434ab18b82c1a
  tests93 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
d4e8eb4882c79b69bfb866228f9486fb
  tests94 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestUtil.tests95) -}
7c5015eb36be951facd97cb1b60df2a4
  tests95 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("1.0.0 <= 2.0"#) -}
a85b9a8c4fb4a3b94dbe708756a090f2
  tests96 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   TestUtil.tests99
                   TestUtil.tests97
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
e68e827e5e30ca91e0f7d1deed7dca44
  tests97 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case TestUtil.tests_eta6 of wild {
                   GHC.Types.False -> (# s, GHC.Types.[] @ GHC.Types.Char #)
                   GHC.Types.True
                   -> case TestUtil.tests98 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {} }) -}
34c4eb782fcb23d0c64ad4c08191a142
  tests98 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
c6044430d306f80cce7ef5524c48cac6
  tests99 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestUtil.tests100) -}
8584a0cd0460a6d953a0bb3d56ba1dc6
  tests_eta :: GHC.Base.Maybe Defs.Constrs
  {- Unfolding: (Utils.merge TestUtil.c5l TestUtil.c5r) -}
d47abab401daf64533efc509b121f964
  tests_eta1 :: GHC.Base.Maybe Defs.Constrs
  {- Unfolding: (Utils.merge TestUtil.c4l TestUtil.c4r) -}
3665965ca49985a9cbee862c46226926
  tests_eta2 :: GHC.Base.Maybe Defs.Constrs
  {- Unfolding: (Utils.merge TestUtil.c3l TestUtil.c3r) -}
523c293e026e421e209fcfd11638eb9b
  tests_eta3 :: GHC.Base.Maybe Defs.Constrs
  {- Unfolding: (Utils.merge TestUtil.c2l TestUtil.c2r) -}
ed1079653d659b04586c60561fac834e
  tests_eta4 :: GHC.Base.Maybe Defs.Constrs
  {- Unfolding: (Utils.merge TestUtil.c1l TestUtil.c1r) -}
7d29a1a3f23415ff04b5c0a1ce320c52
  tests_eta5 :: GHC.Types.Bool
  {- Unfolding: (case GHC.Classes.$fOrd[]_$ccompare
                        @ Defs.VNum
                        Defs.$fOrdVNum
                        TestUtil.tests50
                        TestUtil.tests45 of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
743909291fc0d45acc4c6bbcfc5c4bc8
  tests_eta6 :: GHC.Types.Bool
  {- Unfolding: (case GHC.Classes.$fOrd[]_$ccompare
                        @ Defs.VNum
                        Defs.$fOrdVNum
                        TestUtil.tests71
                        TestUtil.tests60 of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
a2985efae9f0af686f1bd5f8c0c80196
  tests_eta7 :: GHC.Types.Bool
  {- Unfolding: (case GHC.Classes.$fOrd[]_$ccompare
                        @ Defs.VNum
                        Defs.$fOrdVNum
                        TestUtil.tests60
                        TestUtil.tests71 of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
7df6d5349ca42860ebe4f763cd49d07b
  v1 :: Defs.Version
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                TestUtil.tests60 `cast` (Sym (Defs.N:Version[0])) -}
0e76e0c82b1d8cc4221a83a736d69599
  v2 :: Defs.Version
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                TestUtil.tests71 `cast` (Sym (Defs.N:Version[0])) -}
7baebbd855eba4543f88afb4dfdcddba
  v3 :: Defs.Version
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                TestUtil.c1l8 `cast` (Sym (Defs.N:Version[0])) -}
9765c0d155b7c1f9e4a581c32268ef1b
  v4 :: Defs.Version
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                TestUtil.tests88 `cast` (Sym (Defs.N:Version[0])) -}
35bce31e4e3bfd8958fb522ee9259490
  v5 :: Defs.Version
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                TestUtil.tests77 `cast` (Sym (Defs.N:Version[0])) -}
73b37aa35a248a42a1dad987ed702715
  v6 :: Defs.Version
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                TestUtil.tests61 `cast` (Sym (Defs.N:Version[0])) -}
267340417db4f53db145f022c5dcdfc8
  v7 :: Defs.Version
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                TestUtil.tests50 `cast` (Sym (Defs.N:Version[0])) -}
80ede8a0be8a0746050c843f7d40f108
  v8 :: Defs.Version
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                TestUtil.tests45 `cast` (Sym (Defs.N:Version[0])) -}
"SPEC/TestUtil $fShow(,,) @ Bool @ Version @ Version" [orphan] forall (v11 :: GHC.Show.Show
                                                                                Defs.Version)
                                                                      (v12 :: GHC.Show.Show
                                                                                Defs.Version)
                                                                      (v :: GHC.Show.Show
                                                                              GHC.Types.Bool)
  GHC.Show.$fShow(,,) @ GHC.Types.Bool
                      @ Defs.Version
                      @ Defs.Version
                      v
                      v12
                      v11
  = TestUtil.$s$fShow(,)_$s$fShow(,,)
"SPEC/TestUtil $fShowMaybe @ [(PName, PConstr)]" [orphan] forall (v :: GHC.Show.Show
                                                                         [(Defs.PName,
                                                                           Defs.PConstr)])
  GHC.Show.$fShowMaybe @ [(Defs.PName, Defs.PConstr)] v
  = TestUtil.$s$fShowMaybe
"SPEC/TestUtil $fShowMaybe_$cshowList @ [(PName, PConstr)]" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                         [(Defs.PName,
                                                                                           Defs.PConstr)])
  GHC.Show.$fShowMaybe_$cshowList @ [(Defs.PName, Defs.PConstr)]
                                  $dShow
  = TestUtil.$s$fShowMaybe_$cshowList
"SPEC/TestUtil $fShow[] @ (PName, PConstr)" [orphan] forall (v :: GHC.Show.Show
                                                                    (Defs.PName, Defs.PConstr))
  GHC.Show.$fShow[] @ (Defs.PName, Defs.PConstr) v
  = TestUtil.$s$fShowMaybe_$s$fShow[]
"SPEC/TestUtil $fShow[]_$cshow @ (PName, PConstr)" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                (Defs.PName,
                                                                                 Defs.PConstr))
  GHC.Show.$fShow[]_$cshow @ (Defs.PName, Defs.PConstr) $dShow
  = TestUtil.$s$fShow[]_$cshow
"SPEC/TestUtil $fShow[]_$cshowList @ (PName, PConstr)" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                    (Defs.PName,
                                                                                     Defs.PConstr))
  GHC.Show.$fShow[]_$cshowList @ (Defs.PName, Defs.PConstr) $dShow
  = TestUtil.$s$fShow[]_$cshowList
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

