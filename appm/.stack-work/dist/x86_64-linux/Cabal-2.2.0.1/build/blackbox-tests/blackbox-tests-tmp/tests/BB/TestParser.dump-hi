
==================== FINAL INTERFACE ====================
2018-11-05 01:23:58.747937391 UTC

interface main:TestParser 8043
  interface hash: 94675a47000fbc81972a955d9dcbfa30
  ABI hash: 337f67029c1139e384736894016d8121
  export-list hash: 07f61bc9cd6fd6fd38f780a501dfa99a
  orphan hash: b7e51f1d85965445212fa5ca525a25bd
  flag hash: f87cfccf301c75dfb4e52ead32b7e8b1
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  TestParser.db1
  TestParser.db11
  TestParser.db2
  TestParser.db3
  TestParser.db5
  TestParser.db6
  TestParser.db7
  TestParser.db9
  TestParser.src1
  TestParser.src10
  TestParser.src11
  TestParser.src12
  TestParser.src12'
  TestParser.src13
  TestParser.src14
  TestParser.src15
  TestParser.src16
  TestParser.src2
  TestParser.src3
  TestParser.src3cmt
  TestParser.src4
  TestParser.src5
  TestParser.src6
  TestParser.src7
  TestParser.src8
  TestParser.src9
  TestParser.tests
module dependencies:
package dependencies: ansi-terminal-0.8.0.4 ansi-wl-pprint-0.6.8.2
                      appm-0.0.0 array-0.5.2.0 async-2.2.1 base-4.11.1.0 binary-0.8.5.1
                      bytestring-0.10.8.2 call-stack-0.1.0 clock-0.7.2 colour-2.3.4
                      containers-0.5.11.0 deepseq-1.4.3.0 ghc-prim-0.5.2.0
                      hashable-1.2.7.0 integer-gmp-1.0.2.0 mtl-2.2.2
                      optparse-applicative-0.14.2.0 parsec-3.1.13.0 process-1.6.3.0
                      stm-2.4.5.0 tagged-0.8.5 tasty-1.1.0.3 tasty-hunit-0.10.0.1
                      text-1.2.3.0 transformers-0.5.5.0 unbounded-delays-0.1.1.0
                      unix-2.7.2.2 wcwidth-0.0.2
orphans: stm-2.4.5.0:Control.Monad.STM
         hashable-1.2.7.0:Data.Hashable.Generic colour-2.3.4:Data.Colour
         text-1.2.3.0:Data.Text.Lazy text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         clock-0.7.2:System.Clock containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         tagged-0.8.5:Data.Tagged tasty-1.1.0.3:Test.Tasty.Core
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
import  -/  appm-0.0.0:Defs 33704ed0d96c186bd2b1ffcf2d3c5e21
import  -/  appm-0.0.0:Parser c0cd3821ee7fbd8174e6013070c81905
import  -/  appm-0.0.0:ParserImpl d159ed4a8f7f6d29f10223fbf36c17cc
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  tasty-1.1.0.3:Test.Tasty 3aee3445f1ab857a6b68dde2f15a99f9
import  -/  tasty-1.1.0.3:Test.Tasty.Core c12f1e13f1a16d28e3df29c23937c462
import  -/  tasty-hunit-0.10.0.1:Test.Tasty.HUnit 6c91261a2c27cb83a268b6d3017c9a06
import  -/  tasty-hunit-0.10.0.1:Test.Tasty.HUnit.Orig eaa0b10673ab6d8aa2d32b170f906247
257a977f3596b80a487741b7a18a86be
  $s$fShowEither ::
    GHC.Show.Show (Data.Either.Either [GHC.Types.Char] Defs.Database)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Either.Either [GHC.Types.Char] Defs.Database)
                  (Data.Either.$fShowEither_$cshowsPrec
                     @ [GHC.Types.Char]
                     @ Defs.Database
                     GHC.Show.$fShow[]_$s$fShow[]1
                     Defs.$fShowDatabase)
                  (\ (x :: Data.Either.Either [GHC.Types.Char] Defs.Database) ->
                   case x of wild {
                     Data.Either.Left b1
                     -> GHC.Base.augment
                          @ GHC.Types.Char
                          (\ @ b
                             (c :: GHC.Types.Char -> b -> b)[OneShot]
                             (n :: b)[OneShot] ->
                           GHC.Base.foldr @ GHC.Types.Char @ b c n Data.Either.$fShowEither4)
                          (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)3
                             (GHC.Show.showLitString
                                b1
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.$fShow(,)3
                                   (GHC.Types.[] @ GHC.Types.Char))))
                     Data.Either.Right b1
                     -> GHC.Base.build
                          @ GHC.Types.Char
                          (\ @ b
                             (c :: GHC.Types.Char -> b -> b)[OneShot]
                             (n :: b)[OneShot] ->
                           GHC.Base.foldr
                             @ GHC.Types.Char
                             @ b
                             c
                             (GHC.Base.foldr
                                @ GHC.Types.Char
                                @ b
                                c
                                n
                                (Defs.prettyPkgs b1 `cast` (Defs.N:Database[0])))
                             Data.Either.$fShowEither2) })
                  (\ (ls :: [Data.Either.Either [GHC.Types.Char] Defs.Database])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Data.Either.Either [GHC.Types.Char] Defs.Database)
                     (Data.Either.$fShowEither_$cshowsPrec
                        @ [GHC.Types.Char]
                        @ Defs.Database
                        GHC.Show.$fShow[]_$s$fShow[]1
                        Defs.$fShowDatabase
                        Data.Either.$fShowEither1)
                     ls
                     s) -}
7d9ad7edbf0069fadbdb0940deb58c52
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   TestParser.$trModule3
                   TestParser.$trModule1) -}
5548723eb8c4f5f43c44286253c07cdf
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TestParser.$trModule2) -}
512dce78f729a1c36f9c36d3e7ba3881
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TestParser"#) -}
92ab894bde811c03730e7f44db980977
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TestParser.$trModule4) -}
1f6bb1ee7b59cd3a2ce9a2189f979d26
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
b7c3ca268ab44652f4d3fcaa23e54b00
  db1 :: Defs.Database
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                TestParser.db4 `cast` (Sym (Defs.N:Database[0])) -}
4cdb5a1929be4c6e0ddb037d67c94db1
  db10 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestParser.db12
                   (GHC.Types.[] @ Defs.VNum)) -}
3321fab0ddd3a4b9c4216b9235e7e602
  db100 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestParser.db24
                   TestParser.db62) -}
6bad1288b839888f4fc3ee1d3632b0c3
  db101 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.db102) -}
0ffe77d2e3907b4b3589930d6ce64fb8
  db102 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("dav"#) -}
00e051958a4e24505ecdde78d3104a41
  db103 :: (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
  {- Strictness: m,
     Unfolding: ((TestParser.db53 `cast` (Sym (Defs.N:PName[0])),
                  TestParser.db104)) -}
47a51e1f049647da34022f977bfaf844
  db104 :: (GHC.Types.Bool, Defs.Version, Defs.Version)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.True,
                  Defs.minV1 `cast` (Sym (Defs.N:Version[0])),
                  Defs.maxV1 `cast` (Sym (Defs.N:Version[0])))) -}
80d44290c824d81f3f1302b4920e913a
  db105 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.db106) -}
6414095fc9289f12c356e7b9a437af43
  db106 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("foo-hoo"#) -}
b6fd499ae00d226ffc6a5f48d728c4c4
  db107 :: [Defs.Pkg]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.Pkg
                   TestParser.db108
                   (GHC.Types.[] @ Defs.Pkg)) -}
477ebf914d85ded2d9ef3bc059440fbd
  db108 :: Defs.Pkg
  {- Strictness: m,
     Unfolding: (Defs.Pkg
                   TestParser.db14 `cast` (Sym (Defs.N:PName[0]))
                   TestParser.db10 `cast` (Sym (Defs.N:Version[0]))
                   (GHC.Types.[] @ GHC.Types.Char)
                   TestParser.db109) -}
5ef79f719beef6e9ad006b843891fa2f
  db109 :: [(Defs.PName, Defs.PConstr)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, Defs.PConstr)
                   TestParser.db113
                   TestParser.db110) -}
ffcc271de0580bc10000c94e6c536574
  db11 :: Defs.Database
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                TestParser.db16 `cast` (Sym (Defs.N:Database[0])) -}
5f394a684d443d477036a4ef0ea151c9
  db110 :: [(Defs.PName, Defs.PConstr)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, Defs.PConstr)
                   TestParser.db111
                   (GHC.Types.[] @ (Defs.PName, Defs.PConstr))) -}
d40cb74eefd40c35c5fcd924c053d574
  db111 :: (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
  {- Strictness: m,
     Unfolding: ((TestParser.db101 `cast` (Sym (Defs.N:PName[0])),
                  TestParser.db112)) -}
1a42563625ad976d709baf402551c802
  db112 :: (GHC.Types.Bool, Defs.Version, Defs.Version)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.False,
                  TestParser.db100 `cast` (Sym (Defs.N:Version[0])),
                  Defs.maxV1 `cast` (Sym (Defs.N:Version[0])))) -}
fb3ebc6e9f5eee58a63b78820d6b4621
  db113 :: (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
  {- Strictness: m,
     Unfolding: ((TestParser.db53 `cast` (Sym (Defs.N:PName[0])),
                  TestParser.db114)) -}
b1523cbd62c624e809687737463bde78
  db114 :: (GHC.Types.Bool, Defs.Version, Defs.Version)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.False,
                  Defs.minV1 `cast` (Sym (Defs.N:Version[0])),
                  Defs.minV1 `cast` (Sym (Defs.N:Version[0])))) -}
d18f83f926cdb414211ace8772aaf165
  db115 :: [Defs.Pkg]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.Pkg
                   TestParser.db116
                   (GHC.Types.[] @ Defs.Pkg)) -}
7acac8e307e686e068b77fcc6432e801
  db116 :: Defs.Pkg
  {- Strictness: m,
     Unfolding: (Defs.Pkg
                   TestParser.db53 `cast` (Sym (Defs.N:PName[0]))
                   TestParser.db34 `cast` (Sym (Defs.N:Version[0]))
                   TestParser.db32
                   TestParser.db47) -}
09bb22dc147ce76163bad3cf463db5e9
  db117 :: [Defs.Pkg]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.Pkg
                   TestParser.db118
                   (GHC.Types.[] @ Defs.Pkg)) -}
145bd9bbe383eb7e4f7f0895a8b2602b
  db118 :: Defs.Pkg
  {- Strictness: m,
     Unfolding: (Defs.Pkg
                   TestParser.db119 `cast` (Sym (Defs.N:PName[0]))
                   TestParser.db34 `cast` (Sym (Defs.N:Version[0]))
                   TestParser.db32
                   TestParser.db18) -}
bf16c6ebed59c5e9baee42f650b8614c
  db119 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.db120) -}
7dd7bd911533f6649922e1e51fa13f99
  db12 :: Defs.VNum
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Defs.VN
                   TestParser.db13
                   (GHC.Types.[] @ GHC.Types.Char)) -}
a189228273ff6a0f06c360e9bb1e3cdf
  db120 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("hEj"#) -}
3a755ad802cd874c4c4ba8f7ba176e91
  db13 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
7043e015e436a6b2bb6e8f7f89020af4
  db14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.db15) -}
6a10deffd8c65ff0198f954a5bbe388d
  db15 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("foo"#) -}
14acb45575c03e7c25d8223e6975c084
  db16 :: [Defs.Pkg]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.Pkg
                   TestParser.db17
                   (GHC.Types.[] @ Defs.Pkg)) -}
97ef1bbea499b56827726b3dc8b30cd3
  db17 :: Defs.Pkg
  {- Strictness: m,
     Unfolding: (Defs.Pkg
                   TestParser.db43 `cast` (Sym (Defs.N:PName[0]))
                   TestParser.db34 `cast` (Sym (Defs.N:Version[0]))
                   TestParser.db32
                   TestParser.db18) -}
7b4d5f8a9ce18ef56377dbb9c4f4128e
  db18 :: [(Defs.PName, Defs.PConstr)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, Defs.PConstr)
                   TestParser.db19
                   (GHC.Types.[] @ (Defs.PName, Defs.PConstr))) -}
fe815db928dd32df1b8b4baad96b8ed7
  db19 :: (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
  {- Strictness: m,
     Unfolding: ((TestParser.db30 `cast` (Sym (Defs.N:PName[0])),
                  TestParser.db20)) -}
a88fbab0de1b5e91b2193f7c857ce053
  db2 :: Defs.Database
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                TestParser.db45 `cast` (Sym (Defs.N:Database[0])) -}
6357843f36079e3654b93fd1a1c68db0
  db20 :: (GHC.Types.Bool, Defs.Version, Defs.Version)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.True,
                  TestParser.db21 `cast` (Sym (Defs.N:Version[0])),
                  Defs.maxV1 `cast` (Sym (Defs.N:Version[0])))) -}
ab1a1e6a3620970341013625dca2e9cb
  db21 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestParser.db28
                   TestParser.db22) -}
c3cf26778a8485117356154f88cbbfd5
  db22 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestParser.db26
                   TestParser.db23) -}
ea656c4f9a46f64e9f10182f5478d2ee
  db23 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestParser.db24
                   (GHC.Types.[] @ Defs.VNum)) -}
d552f9d0ac058520b1ae76f77786ace2
  db24 :: Defs.VNum
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Defs.VN
                   TestParser.db25
                   (GHC.Types.[] @ GHC.Types.Char)) -}
4bb1afd719aeaae15044e90e4f066b00
  db25 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 9#) -}
437ffc930ddf654dfe170820046bd39a
  db26 :: Defs.VNum
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Defs.VN
                   TestParser.db27
                   (GHC.Types.[] @ GHC.Types.Char)) -}
a22782d7a4c977dcf43e8281a665e36e
  db27 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
2ae67f28565b3704f58cae01e8c6e17f
  db28 :: Defs.VNum
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Defs.VN
                   TestParser.db29
                   (GHC.Types.[] @ GHC.Types.Char)) -}
f537679b5dcc64d4818369c977335807
  db29 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 4#) -}
d3a80d55356767ca53ee3bf9e5047d12
  db3 :: Defs.Database
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                TestParser.db55 `cast` (Sym (Defs.N:Database[0])) -}
a736725dc30bf1b23083a2a75d80559b
  db30 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.db31) -}
102038c896e2cd87691deabfc6f06845
  db31 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Bar"#) -}
b97ebe7a92e8f188e8d354615186a51b
  db32 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.db33) -}
2900e021272c47680c6fe0d8926192f0
  db33 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LOL du; \"hej\" med dig"#) -}
ddc891d6addf8018fa1d106e4dddfacd
  db34 :: [Defs.VNum]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestParser.db12
                   TestParser.db35) -}
e7e7a80a9cae5f35cea40a1cd88939f7
  db35 :: [Defs.VNum]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestParser.db41
                   TestParser.db36) -}
834c4a5b4e70e2d366aaf0b8b4c2dbdd
  db36 :: [Defs.VNum]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestParser.db37
                   (GHC.Types.[] @ Defs.VNum)) -}
43d778c2c009345264f250dc4595646e
  db37 :: Defs.VNum
  {- Strictness: m,
     Unfolding: (Defs.VN TestParser.db40 TestParser.db38) -}
f2233be2666f0a9282df0e9944e5ba1f
  db38 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.db39) -}
c9a841cc2483b7056ba1c3e68c6bdb3b
  db39 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("f"#) -}
cce854cf7eed2692159293130994b4a9
  db4 :: [Defs.Pkg]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.Pkg
                   TestParser.db8
                   (GHC.Types.[] @ Defs.Pkg)) -}
52c689d886bcdb1363dd6bb27e7745f0
  db40 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 5#) -}
f42e5a411703c93f0db26d39e03419e3
  db41 :: Defs.VNum
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Defs.VN
                   TestParser.db42
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b9940007ab19460f0f32610a82a08864
  db42 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3#) -}
28f41b3815deb0b7e37118bd2ed0ad33
  db43 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.db44) -}
cbbe1a770dfab43db4ad2eb9c0967f57
  db44 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("This is a general name!!1 --- \n\
                 \\"test\""#) -}
2e4a5aefa25f6a56fbe1d229ff482a4c
  db45 :: [Defs.Pkg]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.Pkg
                   TestParser.db46
                   (GHC.Types.[] @ Defs.Pkg)) -}
d383e55458a2f724f4cb4d38eb333047
  db46 :: Defs.Pkg
  {- Strictness: m,
     Unfolding: (Defs.Pkg
                   TestParser.db53 `cast` (Sym (Defs.N:PName[0]))
                   TestParser.db34 `cast` (Sym (Defs.N:Version[0]))
                   TestParser.db51
                   TestParser.db47) -}
ff629b91217c01a2555f7528a9e7466f
  db47 :: [(Defs.PName, Defs.PConstr)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, Defs.PConstr)
                   TestParser.db48
                   (GHC.Types.[] @ (Defs.PName, Defs.PConstr))) -}
1b9d4c63c48ec3ab257648c1b5846ad1
  db48 :: (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
  {- Strictness: m,
     Unfolding: ((TestParser.db49 `cast` (Sym (Defs.N:PName[0])),
                  TestParser.db20)) -}
1d1858a626096dc1a1f10998e10667dd
  db49 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.db50) -}
00a05ef64f7cdb3c868b0de053a49d35
  db5 :: Defs.Database
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                TestParser.db94 `cast` (Sym (Defs.N:Database[0])) -}
1b4f586fc95c759f8c8e283e46d0e781
  db50 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("bar"#) -}
be200127c1f88bb91145917f5817f125
  db51 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.db52) -}
c08f853257a14d4dfedbcb6e752da963
  db52 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LOL du \"hej\" med dig"#) -}
97c2c32ebbdbc1826127326f1507bc77
  db53 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.db54) -}
830614be62cbcd8ab69bdd0f59b25ab5
  db54 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("hej"#) -}
e46329ab533a6f9b31abdefbf62ce5ea
  db55 :: [Defs.Pkg]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.Pkg
                   TestParser.db87
                   TestParser.db56) -}
f362c177330cdcd94f3ed8e8b2f436b2
  db56 :: [Defs.Pkg]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.Pkg
                   TestParser.db82
                   TestParser.db57) -}
b24e9b96a1de76aa49b93460525e7d0d
  db57 :: [Defs.Pkg]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.Pkg
                   TestParser.db69
                   TestParser.db58) -}
8f7e411534ee283cf69176d200fb534e
  db58 :: [Defs.Pkg]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.Pkg
                   TestParser.db59
                   (GHC.Types.[] @ Defs.Pkg)) -}
c2989d252fecc429b1d9e0e8f1888ba6
  db59 :: Defs.Pkg
  {- Strictness: m,
     Unfolding: (Defs.Pkg
                   TestParser.db67 `cast` (Sym (Defs.N:PName[0]))
                   TestParser.db60 `cast` (Sym (Defs.N:Version[0]))
                   (GHC.Types.[] @ GHC.Types.Char)
                   (GHC.Types.[] @ (Defs.PName, Defs.PConstr))) -}
144b271b91a4d411ba3c3c37a4633d71
  db6 :: Defs.Database
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                TestParser.db107 `cast` (Sym (Defs.N:Database[0])) -}
0d10bfc321dea991f28ebba1c163f9ca
  db60 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestParser.db65
                   TestParser.db61) -}
89cb966d432d092f040e2798eabb1170
  db61 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestParser.db12
                   TestParser.db62) -}
b52b1345c6fff0779178b14875762b89
  db62 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestParser.db63
                   (GHC.Types.[] @ Defs.VNum)) -}
33a7d8edb2f7c01da8409cd9e36a9e48
  db63 :: Defs.VNum
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Defs.VN
                   TestParser.db64
                   (GHC.Types.[] @ GHC.Types.Char)) -}
e7eb309c9a31bb669078e9d41efd9fc2
  db64 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
324bfa37e1e237a8f15cdebf78de8e31
  db65 :: Defs.VNum
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Defs.VN
                   TestParser.db66
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ed82697e2bcfb9c87bea8a0a7578a485
  db66 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 6#) -}
eb219043e4a0520f49998db8dfb74356
  db67 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.db68) -}
eb91d74721c04bdc5fe413dda0935797
  db68 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("baz"#) -}
58297c30a9f4021be17e5bc05fd36534
  db69 :: Defs.Pkg
  {- Strictness: m,
     Unfolding: (Defs.Pkg
                   TestParser.db49 `cast` (Sym (Defs.N:PName[0]))
                   TestParser.db81 `cast` (Sym (Defs.N:Version[0]))
                   TestParser.db79
                   TestParser.db70) -}
19344a9f72e617d74989dcd7c1557ffd
  db7 :: Defs.Database
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                TestParser.db115 `cast` (Sym (Defs.N:Database[0])) -}
dc1c7b8dab4d86c14bd9181fa7776c39
  db70 :: [(Defs.PName, Defs.PConstr)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, Defs.PConstr)
                   TestParser.db71
                   (GHC.Types.[] @ (Defs.PName, Defs.PConstr))) -}
02577c829085747355dcf94110fe6744
  db71 :: (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
  {- Strictness: m,
     Unfolding: ((TestParser.db67 `cast` (Sym (Defs.N:PName[0])),
                  TestParser.db72)) -}
55a03afe3185c5279a06619bf790efd7
  db72 :: (GHC.Types.Bool, Defs.Version, Defs.Version)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.False,
                  TestParser.db77 `cast` (Sym (Defs.N:Version[0])),
                  TestParser.db73 `cast` (Sym (Defs.N:Version[0])))) -}
5f59d8afa0e23a54e54365e02b8626ce
  db73 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestParser.db76
                   TestParser.db74) -}
f1a22ac205ed68e6ec956a9711a73283
  db74 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestParser.db26
                   TestParser.db75) -}
de6ffde0ec90b9931b80bb967df5015d
  db75 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestParser.db41
                   (GHC.Types.[] @ Defs.VNum)) -}
579ee703273168ccd923d8549f54a081
  db76 :: Defs.VNum
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Defs.VN
                   TestParser.db40
                   (GHC.Types.[] @ GHC.Types.Char)) -}
beb5e446789db6f89202b8a7451b7670
  db77 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestParser.db41
                   TestParser.db78) -}
bac420d103147f5aea55181c3d6478b0
  db78 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestParser.db28
                   (GHC.Types.[] @ Defs.VNum)) -}
6701207e9a3c40ce4dca416ee323bddc
  db79 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.db80) -}
b48acf621a1f2007e20d6150d1dea3d0
  db8 :: Defs.Pkg
  {- Strictness: m,
     Unfolding: (Defs.Pkg
                   TestParser.db14 `cast` (Sym (Defs.N:PName[0]))
                   TestParser.db10 `cast` (Sym (Defs.N:Version[0]))
                   (GHC.Types.[] @ GHC.Types.Char)
                   (GHC.Types.[] @ (Defs.PName, Defs.PConstr))) -}
98b12021935a3695c15274f858b1d503
  db80 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("The bar library, new API"#) -}
40c371e56b72f5d437c15567f141bac6
  db81 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestParser.db63
                   TestParser.db10) -}
61495b88d286a362c054f7165302410f
  db82 :: Defs.Pkg
  {- Strictness: m,
     Unfolding: (Defs.Pkg
                   TestParser.db49 `cast` (Sym (Defs.N:PName[0]))
                   TestParser.db85 `cast` (Sym (Defs.N:Version[0]))
                   TestParser.db83
                   (GHC.Types.[] @ (Defs.PName, Defs.PConstr))) -}
540cd770fc0a1db1908f880b9ea9a622
  db83 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.db84) -}
57c73bd398d3fdb8c68a405d3400bf1b
  db84 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("The bar library"#) -}
3d3497191a2e768b4804d9dc01b80b76
  db85 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestParser.db12
                   TestParser.db86) -}
67f6e66b3797c805ccff943ae55557c1
  db86 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestParser.db26
                   (GHC.Types.[] @ Defs.VNum)) -}
e0f57dc9f6a789c62dfe4e4011a5b664
  db87 :: Defs.Pkg
  {- Strictness: m,
     Unfolding: (Defs.Pkg
                   TestParser.db14 `cast` (Sym (Defs.N:PName[0]))
                   TestParser.db93 `cast` (Sym (Defs.N:Version[0]))
                   TestParser.db91
                   TestParser.db88) -}
7e9f382c468f45b0ff3a5f830f9a6ac6
  db88 :: [(Defs.PName, Defs.PConstr)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, Defs.PConstr)
                   TestParser.db89
                   (GHC.Types.[] @ (Defs.PName, Defs.PConstr))) -}
4e3bbda8e37cbe7c61a9e39cf5c653d2
  db89 :: (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
  {- Strictness: m,
     Unfolding: ((TestParser.db49 `cast` (Sym (Defs.N:PName[0])),
                  TestParser.db90)) -}
a18e0a8bb8ea7e07ac67285fedc7bbdd
  db9 :: Defs.Database
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                TestParser.db117 `cast` (Sym (Defs.N:Database[0])) -}
88a894a6778837923bc2aead2e826318
  db90 :: (GHC.Types.Bool, Defs.Version, Defs.Version)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.True,
                  TestParser.db85 `cast` (Sym (Defs.N:Version[0])),
                  Defs.maxV1 `cast` (Sym (Defs.N:Version[0])))) -}
739e30d0f33e113596daf3ed44472398
  db91 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.db92) -}
5876f741018c7ef331c0b94b2e7b1ddd
  db92 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("The foo application"#) -}
14cc5ed6f6838dd97f8d187eb10aff13
  db93 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   TestParser.db63
                   TestParser.db75) -}
805890dd97ba0e5755a128fbb728b91d
  db94 :: [Defs.Pkg]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.Pkg
                   TestParser.db95
                   (GHC.Types.[] @ Defs.Pkg)) -}
209ea041b462dd992a1906dd8ea03904
  db95 :: Defs.Pkg
  {- Strictness: m,
     Unfolding: (Defs.Pkg
                   TestParser.db105 `cast` (Sym (Defs.N:PName[0]))
                   TestParser.db10 `cast` (Sym (Defs.N:Version[0]))
                   (GHC.Types.[] @ GHC.Types.Char)
                   TestParser.db96) -}
423a803c95777afac6c67ecc7e3e8ed1
  db96 :: [(Defs.PName, Defs.PConstr)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, Defs.PConstr)
                   TestParser.db103
                   TestParser.db97) -}
a9122c17caa99bff189e50a752c2e040
  db97 :: [(Defs.PName, Defs.PConstr)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, Defs.PConstr)
                   TestParser.db98
                   (GHC.Types.[] @ (Defs.PName, Defs.PConstr))) -}
aa1e1ce26a8f0f730922ad609834fa5e
  db98 :: (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
  {- Strictness: m,
     Unfolding: ((TestParser.db101 `cast` (Sym (Defs.N:PName[0])),
                  TestParser.db99)) -}
be4c0e5179b14e3fd2da906500ff5683
  db99 :: (GHC.Types.Bool, Defs.Version, Defs.Version)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.True,
                  Defs.minV1 `cast` (Sym (Defs.N:Version[0])),
                  TestParser.db100 `cast` (Sym (Defs.N:Version[0])))) -}
317feb1fa4363fefae4a9421198aa1f1
  src1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.src22) -}
3b62ad020eec69c41089228c35360d2f
  src10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.src23) -}
7c6565c47c196f37b17c440068854f44
  src11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.src24) -}
1a5a6f5c776ad4b7f9dea3b2c4bce45e
  src12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.src25) -}
e828adbdf29e9da3dd275dea0bedff97
  src12' :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.src12'1) -}
1b087dbfce0d6ba2a0d8894abcd888d1
  src12'1 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("pAcKAge { \n\
                 \  VERSION 1.3.5f; \n\
                 \}"#) -}
22042f50a9886ae8eb01998b4739b7fc
  src13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.src26) -}
6e79e772d6ae12dfdfc49033323c4590
  src14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.src27) -}
3bff3d2ef8b91fca6228c0919a1f4379
  src15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.src28) -}
ae7f91ab9c26093ab03796e7ae707f3b
  src16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.src29) -}
1d3cf72f7267facab3b0e45665e3c9b9
  src2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.src30) -}
d1a08e952ec5bda10e8fefc5c6480cb6
  src22 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("package {name foo}"#) -}
a04062dd037832500fc798623b4d533d
  src23 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("pAcKAge { \n\
                 \  NAmehEj; \n\
                 \  VERSION 1.3.5f; \n\
                 \  dEScrIption \"LOL du; \"\"hej\"\" med dig\"; \n\
                 \  reQUIRES Bar >= 1.0; \n\
                 \  coNFlicts Bar < 4.0.9 \n\
                 \}"#) -}
1af9244c1e688ad33a118ee51bcc71f0
  src24 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("pAcKAge { \n\
                 \  NAme \"This is a general name!!1 --- \n\
                 \\"\"test\"\"\"; \n\
                 \  VERSION 1.3.5f; \n\
                 \  dEScrIption \"LOL du; \"\"hej\"\" med dig\"; \n\
                 \  reQUIRES Bar >= 1.0; \n\
                 \  coNFlicts Bar < 4.0.9 \n\
                 \}"#) -}
ab67315edf9df09c83d3c7dacf2cac8d
  src25 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("pAcKAge { \n\
                 \  NAme \"This is a general name!!1 --- \n\
                 \\"\"test\"\"\"; \n\
                 \  NAme \"This is a general name!!1 --- \n\
                 \\"\"test\"\"\"; \n\
                 \  VERSION 1.3.5f; \n\
                 \}"#) -}
bc5d12d904d8ef30e4c51ea54131a49a
  src26 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("pAcKAge { \n\
                 \  NAme \"This is a general name!!1 --- \n\
                 \\"\"test\"\"\"; \n\
                 \  VERSION 1.3.5f; \n\
                 \  VERSION 1.3.5f; \n\
                 \}"#) -}
3059616785f21d415d7b1b50d7488785
  src27 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("pAcKAge { \n\
                 \  NAme \"This is a general name!!1 --- \n\
                 \\"\"test\"\"\"; \n\
                 \  dEScrIption \"LOL du; \"\"hej\"\" med dig\"; \n\
                 \  dEScrIption \"LOL du; \"\"hej\"\" med dig\"; \n\
                 \}"#) -}
16b1bd5ee515ef098f8c1228976cfa28
  src28 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("pAcKAge { \n\
                 \  NAme foo; \n\
                 \  requires foo; \n\
                 \}"#) -}
8ab4778fa768645fb48ad27bedcc66a3
  src29 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("pAcKAge { \n\
                 \  NAme \"This is a general name!!1 --- \n\
                 \\"\"test\"\"\"; \n\
                 \  dEScrIption \"LOL du; \"\"hej\"\" med dig\"; \n\
                 \  requires bar < 3; \n\
                 \  requires bar > 7.9 \n\
                 \}"#) -}
a0635e32c8e6cb169eee4b64210f5a14
  src3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.src31) -}
7f3149208fd13451500d9a2a4e64b9f9
  src30 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("package { \n\
                 \  name hej; \n\
                 \  version 1.3.5f; \n\
                 \  description \"LOL du \"\"hej\"\" med dig\"; \n\
                 \  requires bar >= 1.0; \n\
                 \  conflicts bar < 4.0.9 \n\
                 \}"#) -}
ec6341415eb91360045af19067920d6a
  src31 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("package { \n\
                 \  name foo; \n\
                 \  version 2.3; \n\
                 \  description \"The foo application\"; \n\
                 \  requires bar >= 1.0 \n\
                 \} \n\
                 \\n\
                 \package { \n\
                 \  name bar; \n\
                 \  version 1.0; \n\
                 \  description \"The bar library\" \n\
                 \} \n\
                 \\n\
                 \package { \n\
                 \  name bar; \n\
                 \  version 2.1; \n\
                 \  description \"The bar library, new API\"; \n\
                 \  conflicts baz < 3.4, baz >= 5.0.3 \n\
                 \} \n\
                 \\n\
                 \package { \n\
                 \  name baz; \n\
                 \  version 6.1.2; \n\
                 \}"#) -}
9bda8d157f66f3244be9f2b2c71bdf02
  src32 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("package { \n\
                 \  name foo; \n\
                 \  version 2.3; \n\
                 \  description \"The foo application\"; \n\
                 \  requires bar >= 1.0 \n\
                 \} \n\
                 \\n\
                 \package { \n\
                 \  name bar; \n\
                 \  name far; \n\
                 \  version 1.0; \n\
                 \  description \"The bar library\" \n\
                 \} \n\
                 \\n\
                 \package { \n\
                 \  name bar; \n\
                 \  version 2.1; \n\
                 \  description \"The bar library, new API\"; \n\
                 \  conflicts baz < 3.4, baz >= 5.0.3 \n\
                 \} \n\
                 \\n\
                 \package { \n\
                 \  name baz; \n\
                 \  version 6.1.2; \n\
                 \}"#) -}
eda63a0aa49182f14c2c0255f3690178
  src33 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("package {name foo-hoo; requires hej, dav < 9.2}"#) -}
3072a83db7ed1f993a290bdf8be3d5b7
  src34 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("package {name foo; conflicts hej, dav < 9.2}"#) -}
b75711163615cfb7b5f3363dd4932ef0
  src35 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("package { \n\
                 \  name hej; \n\
                 \  version 1.3.5f; \n\
                 \  description \"LOL du; \"\"hej\"\" med dig\"; \n\
                 \  requires bar >= 1.0; \n\
                 \  conflicts bar < 4.0.9 \n\
                 \}"#) -}
05c0a7af8b47addda96d79b1c1569a1e
  src36 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("pAcKAge { \n\
                 \  NAme hej; \n\
                 \  VERSION 1.3.5f; \n\
                 \  dEScrIption \"LOL du; \"\"hej\"\" med dig\"; \n\
                 \  reQUIRES bar >= 1.0; \n\
                 \  coNFlicts bar < 4.0.9 \n\
                 \}"#) -}
f80041f497f37ff55dda48a5e76e8c61
  src37 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("pAcKAge { \n\
                 \  NAme hEj; \n\
                 \  VERSION 1.3.5f; \n\
                 \  dEScrIption \"LOL du; \"\"hej\"\" med dig\"; \n\
                 \  reQUIRES Bar >= 1.0; \n\
                 \  coNFlicts Bar < 4.0.9 \n\
                 \}"#) -}
a734370b68c7bd26ce09c5f830abc3e5
  src3cmt :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.src3cmt1) -}
c4b5d0979ff59bde1b12414b5a3e5588
  src3cmt1 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("package { \n\
                 \  name--test test\n\
                 \    foo; -- this is the name \n\
                 \  version 2.3; \n\
                 \  description \"The foo application\"; \n\
                 \  requires bar >= 1.0 \n\
                 \} \n\
                 \-- now i'm between packages\n\
                 \package { \n\
                 \  name bar; \n\
                 \  version 1.0; --this is the version \n\
                 \  description \"The bar library\" \n\
                 \} \n\
                 \\n\
                 \package { \n\
                 \  name bar; \n\
                 \  version 2.1; \n\
                 \  description \"The bar library, new API\"; \n\
                 \  conflicts baz < 3.4, baz >= 5.0.3 \n\
                 \} \n\
                 \\n\
                 \-- almost done!\n\
                 \\n\
                 \package { \n\
                 \  name baz; \n\
                 \  version 6.1.2; \n\
                 \}  -- goodbye"#) -}
1156f3e5d6462f84d7f292c417049bd3
  src4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.src32) -}
081757eb17748d02cb19a1ae832fc866
  src5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.src33) -}
7117c6a5f6d60aff0744a253548c0d77
  src6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.src34) -}
713eff88e1247f537771357ba3ad56fd
  src7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.src35) -}
131f1eb17cb4bf48b5ee8e40ab6a2fdf
  src8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.src36) -}
02e61956e3acebfd5513f92e26d5b715
  src9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.src37) -}
74ec4bf5f5e32efff9fe216a98a3d29b
  tests :: Test.Tasty.Core.TestTree
  {- Strictness: m2,
     Unfolding: (Test.Tasty.Core.TestGroup
                   TestParser.tests109
                   TestParser.tests1) -}
1f1eb838beaa4894a22d40201a6a38dc
  tests1 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   TestParser.tests104
                   TestParser.tests2) -}
9221a9f02ef0a99f9a1f015df8f1e22d
  tests10 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   TestParser.tests59
                   TestParser.tests11) -}
4b01259d8bea32e437e3a9eb3664b5df
  tests100 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case TestParser.tests_eta8 of wild {
                   Data.Either.Left a1
                   -> case TestParser.tests101 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {}
                   Data.Either.Right a1
                   -> case GHC.Classes.$fEq[]_$c==
                             @ Defs.Pkg
                             Defs.$fEqPkg
                             a1 `cast` (Defs.N:Database[0])
                             TestParser.db45 of wild1 {
                        GHC.Types.False
                        -> case TestParser.tests101 s
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                           of {}
                        GHC.Types.True -> (# s, GHC.Types.[] @ GHC.Types.Char #) } }) -}
d8287e54bab0b321964a692ea6157b99
  tests101 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
6628b552f2aed176888aee17c631b756
  tests102 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.tests103) -}
6d9d3dd8496ed145e9efd9161740a7bb
  tests103 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("small"#) -}
640533c51cc9a15b80f3382050589220
  tests104 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   TestParser.tests107
                   TestParser.tests105
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
1e839ff8e91f846079a3712eedb6653e
  tests105 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case TestParser.tests_eta9 of wild {
                   Data.Either.Left a1
                   -> case TestParser.tests106 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {}
                   Data.Either.Right a1
                   -> case GHC.Classes.$fEq[]_$c==
                             @ Defs.Pkg
                             Defs.$fEqPkg
                             a1 `cast` (Defs.N:Database[0])
                             TestParser.db4 of wild1 {
                        GHC.Types.False
                        -> case TestParser.tests106 s
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                           of {}
                        GHC.Types.True -> (# s, GHC.Types.[] @ GHC.Types.Char #) } }) -}
21343fc08d50a9794ef81899ba8eadb7
  tests106 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
fb0016e79a0957fdeb9b76fc993eba66
  tests107 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.tests108) -}
b01637588cf04debb5e69ef8712cf4fc
  tests108 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("tiny"#) -}
c372f9b5947bcd2fd78cf94572333ea2
  tests109 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.tests110) -}
c1d16dd9cbeb9ba153fdf6df67b86bcd
  tests11 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   TestParser.tests54
                   TestParser.tests12) -}
0cdf21eac8ee2e6082f340cfe9ea85c7
  tests110 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Parser tests"#) -}
32e7e3c6b35c5d45b289f9cd7686c44b
  tests12 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   TestParser.tests49
                   TestParser.tests13) -}
c4d7334423757b1da840a59ad754547b
  tests13 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   TestParser.tests44
                   TestParser.tests14) -}
37ac1c04de46bc5fca6244224cd79a1c
  tests14 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   TestParser.tests39
                   TestParser.tests15) -}
4bd3f663fe5bdaace6bff333c5a573d3
  tests15 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   TestParser.tests34
                   TestParser.tests16) -}
cf0d37948985dd0df3b1558291df23b3
  tests16 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   TestParser.tests29
                   TestParser.tests17) -}
552bf85c990667907f61b5a3b57bfb9f
  tests17 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   TestParser.tests24
                   TestParser.tests18) -}
d436f6b4ac3071bbf2fc682c7169311e
  tests18 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   TestParser.tests19
                   (GHC.Types.[] @ Test.Tasty.Core.TestTree)) -}
15e8ec3e72228e1394223614cd00f88c
  tests19 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   TestParser.tests22
                   TestParser.tests20
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
6c73a5cc3a76578d5e66ce0f18ff13d2
  tests2 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   TestParser.tests99
                   TestParser.tests3) -}
78de8a3c3cbaca36d78db65c0c859bc4
  tests20 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Text.Parsec.Prim.runPT
                         @ GHC.Base.String
                         @ Data.Functor.Identity.Identity
                         @ GHC.Types.Char
                         @ ()
                         @ Defs.Database
                         (ParserImpl.$s$fStream[]mtok @ GHC.Types.Char)
                         ParserImpl.parseDatabase1
                           `cast`
                         (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                   <[GHC.Types.Char]>_R
                                   <()>_R
                                   <Data.Functor.Identity.Identity>_R
                                   <Defs.Database>_R))
                         GHC.Tuple.()
                         (GHC.Types.[] @ GHC.Types.Char)
                         TestParser.src16)
                        `cast`
                      (Data.Functor.Identity.N:Identity[0]
                           <Data.Either.Either
                              Text.Parsec.Error.ParseError Defs.Database>_R) of wild {
                   Data.Either.Left e -> (# s, GHC.Types.[] @ GHC.Types.Char #)
                   Data.Either.Right v
                   -> case TestParser.tests21 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {} }) -}
31123e22bf41d8b69366bd8172802443
  tests21 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
dd6fcbc7bdd6583d252f03d20328657f
  tests22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.tests23) -}
42c79cccbe638c9fd8a139968a6d4f47
  tests23 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("inherently contradictory"#) -}
a33a37353f19c2d537f57c1dfd4c152c
  tests24 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   TestParser.tests27
                   TestParser.tests25
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
6b00a6c01e58c8b8824f4e285fb42b73
  tests25 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Text.Parsec.Prim.runPT
                         @ GHC.Base.String
                         @ Data.Functor.Identity.Identity
                         @ GHC.Types.Char
                         @ ()
                         @ Defs.Database
                         (ParserImpl.$s$fStream[]mtok @ GHC.Types.Char)
                         ParserImpl.parseDatabase1
                           `cast`
                         (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                   <[GHC.Types.Char]>_R
                                   <()>_R
                                   <Data.Functor.Identity.Identity>_R
                                   <Defs.Database>_R))
                         GHC.Tuple.()
                         (GHC.Types.[] @ GHC.Types.Char)
                         TestParser.src15)
                        `cast`
                      (Data.Functor.Identity.N:Identity[0]
                           <Data.Either.Either
                              Text.Parsec.Error.ParseError Defs.Database>_R) of wild {
                   Data.Either.Left e -> (# s, GHC.Types.[] @ GHC.Types.Char #)
                   Data.Either.Right v
                   -> case TestParser.tests26 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {} }) -}
fef93e40ce08d1f2135fc21703c4a7d6
  tests26 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
2e992b0d5e8c016a7f4fde47f7c47dcd
  tests27 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.tests28) -}
0f56d6e4ea1f8a0c48d4404acade7c08
  tests28 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("self-referential deps"#) -}
a4373b441cb18e3b785586759b4dda48
  tests29 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   TestParser.tests32
                   TestParser.tests30
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
8c35518fe2f4e61ea72dd3f6751aecf2
  tests3 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   TestParser.tests94
                   TestParser.tests4) -}
95743f3468235986ef4fa44a742019f9
  tests30 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Text.Parsec.Prim.runPT
                         @ GHC.Base.String
                         @ Data.Functor.Identity.Identity
                         @ GHC.Types.Char
                         @ ()
                         @ Defs.Database
                         (ParserImpl.$s$fStream[]mtok @ GHC.Types.Char)
                         ParserImpl.parseDatabase1
                           `cast`
                         (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                   <[GHC.Types.Char]>_R
                                   <()>_R
                                   <Data.Functor.Identity.Identity>_R
                                   <Defs.Database>_R))
                         GHC.Tuple.()
                         (GHC.Types.[] @ GHC.Types.Char)
                         TestParser.src14)
                        `cast`
                      (Data.Functor.Identity.N:Identity[0]
                           <Data.Either.Either
                              Text.Parsec.Error.ParseError Defs.Database>_R) of wild {
                   Data.Either.Left e -> (# s, GHC.Types.[] @ GHC.Types.Char #)
                   Data.Either.Right v
                   -> case TestParser.tests31 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {} }) -}
d3f07bbd7d34bd8ea53604562bf35160
  tests31 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
cedb6ce065ff80e90b083074a8b38425
  tests32 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.tests33) -}
72c691719b3deef6b3e815e9d95e1b15
  tests33 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("description clause"#) -}
596629d57b8e8f41dc1969b5bc871759
  tests34 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   TestParser.tests37
                   TestParser.tests35
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
d6a04791e302d588fd1f060f18ce862c
  tests35 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Text.Parsec.Prim.runPT
                         @ GHC.Base.String
                         @ Data.Functor.Identity.Identity
                         @ GHC.Types.Char
                         @ ()
                         @ Defs.Database
                         (ParserImpl.$s$fStream[]mtok @ GHC.Types.Char)
                         ParserImpl.parseDatabase1
                           `cast`
                         (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                   <[GHC.Types.Char]>_R
                                   <()>_R
                                   <Data.Functor.Identity.Identity>_R
                                   <Defs.Database>_R))
                         GHC.Tuple.()
                         (GHC.Types.[] @ GHC.Types.Char)
                         TestParser.src13)
                        `cast`
                      (Data.Functor.Identity.N:Identity[0]
                           <Data.Either.Either
                              Text.Parsec.Error.ParseError Defs.Database>_R) of wild {
                   Data.Either.Left e -> (# s, GHC.Types.[] @ GHC.Types.Char #)
                   Data.Either.Right v
                   -> case TestParser.tests36 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {} }) -}
9babcc03b4c674839f4a2c2463165f82
  tests36 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
693ab39019ccdf4f93624cf23cb4910a
  tests37 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.tests38) -}
69d20ee29aef3f7747f136a2ed6c17cf
  tests38 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("version clause"#) -}
e9aa12362b6136a24c834de57c2ca515
  tests39 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   TestParser.tests42
                   TestParser.tests40
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
dfdb19dc366d2db78f35e6ebebf48b2e
  tests4 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   TestParser.tests89
                   TestParser.tests5) -}
7c4ec5ba9f1397b267cc55cfe6127232
  tests40 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Text.Parsec.Prim.runPT
                         @ GHC.Base.String
                         @ Data.Functor.Identity.Identity
                         @ GHC.Types.Char
                         @ ()
                         @ Defs.Database
                         (ParserImpl.$s$fStream[]mtok @ GHC.Types.Char)
                         ParserImpl.parseDatabase1
                           `cast`
                         (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                   <[GHC.Types.Char]>_R
                                   <()>_R
                                   <Data.Functor.Identity.Identity>_R
                                   <Defs.Database>_R))
                         GHC.Tuple.()
                         (GHC.Types.[] @ GHC.Types.Char)
                         TestParser.src12')
                        `cast`
                      (Data.Functor.Identity.N:Identity[0]
                           <Data.Either.Either
                              Text.Parsec.Error.ParseError Defs.Database>_R) of wild {
                   Data.Either.Left e -> (# s, GHC.Types.[] @ GHC.Types.Char #)
                   Data.Either.Right v
                   -> case TestParser.tests41 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {} }) -}
3ba39c5f568e12378c142ad656e95794
  tests41 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
b0ae8445e4961248afd01d4dd451aceb
  tests42 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.tests43) -}
0ae04b91897f59c8428473a5805124e8
  tests43 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("name clauses < 1"#) -}
dadf5761ba4e6b4619eca5fc75a8bd55
  tests44 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   TestParser.tests47
                   TestParser.tests45
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
766d1c5e746437d156994a2de070d3c1
  tests45 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Text.Parsec.Prim.runPT
                         @ GHC.Base.String
                         @ Data.Functor.Identity.Identity
                         @ GHC.Types.Char
                         @ ()
                         @ Defs.Database
                         (ParserImpl.$s$fStream[]mtok @ GHC.Types.Char)
                         ParserImpl.parseDatabase1
                           `cast`
                         (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                   <[GHC.Types.Char]>_R
                                   <()>_R
                                   <Data.Functor.Identity.Identity>_R
                                   <Defs.Database>_R))
                         GHC.Tuple.()
                         (GHC.Types.[] @ GHC.Types.Char)
                         TestParser.src12)
                        `cast`
                      (Data.Functor.Identity.N:Identity[0]
                           <Data.Either.Either
                              Text.Parsec.Error.ParseError Defs.Database>_R) of wild {
                   Data.Either.Left e -> (# s, GHC.Types.[] @ GHC.Types.Char #)
                   Data.Either.Right v
                   -> case TestParser.tests46 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {} }) -}
1053167fc928fac4c4b161a64be3e565
  tests46 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
421723b1d0a5cbadcd3f0ff61b08a61c
  tests47 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.tests48) -}
ebc31e6b9377ee0055deedde19d838cf
  tests48 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("name clause > 1"#) -}
f9bf83f726a622d39f64be1676696172
  tests49 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   TestParser.tests52
                   TestParser.tests50
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
14739ecfbf1ded995a81bc5ade0681c6
  tests5 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   TestParser.tests84
                   TestParser.tests6) -}
fc9fcfaefb2c9da86655f0b94ce92fc5
  tests50 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case TestParser.tests_eta of wild {
                   Data.Either.Left a1
                   -> case TestParser.tests51 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {}
                   Data.Either.Right a1
                   -> case GHC.Classes.$fEq[]_$c==
                             @ Defs.Pkg
                             Defs.$fEqPkg
                             a1 `cast` (Defs.N:Database[0])
                             TestParser.db16 of wild1 {
                        GHC.Types.False
                        -> case TestParser.tests51 s
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                           of {}
                        GHC.Types.True -> (# s, GHC.Types.[] @ GHC.Types.Char #) } }) -}
00f66b350615a1c0ec7f780a043977e9
  tests51 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
7130cb1ef4b7e8c4a72493ffd96ca8f3
  tests52 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.tests53) -}
9022b14e81fdbebe941df3878301456d
  tests53 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("strings, general package names"#) -}
acfc69c66f1ecd6079e9ad0f27d04215
  tests54 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   TestParser.tests57
                   TestParser.tests55
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
c5d6b57e6c59cc41d93c4fe4066f8236
  tests55 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Text.Parsec.Prim.runPT
                         @ GHC.Base.String
                         @ Data.Functor.Identity.Identity
                         @ GHC.Types.Char
                         @ ()
                         @ Defs.Database
                         (ParserImpl.$s$fStream[]mtok @ GHC.Types.Char)
                         ParserImpl.parseDatabase1
                           `cast`
                         (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                   <[GHC.Types.Char]>_R
                                   <()>_R
                                   <Data.Functor.Identity.Identity>_R
                                   <Defs.Database>_R))
                         GHC.Tuple.()
                         (GHC.Types.[] @ GHC.Types.Char)
                         TestParser.src10)
                        `cast`
                      (Data.Functor.Identity.N:Identity[0]
                           <Data.Either.Either
                              Text.Parsec.Error.ParseError Defs.Database>_R) of wild {
                   Data.Either.Left e -> (# s, GHC.Types.[] @ GHC.Types.Char #)
                   Data.Either.Right v
                   -> case TestParser.tests56 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {} }) -}
3567ba180cbd0d87acc9d27c51556d2b
  tests56 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
733378efe717e85051a25805551743ba
  tests57 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.tests58) -}
9c768e4618a85118c927e9b3f3c531c5
  tests58 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("no space after keyword"#) -}
aa0ef28aba6dd749acf26def0f30dab3
  tests59 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   TestParser.tests62
                   TestParser.tests60
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
21664f79ed95061f453b86467a148c81
  tests6 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   TestParser.tests79
                   TestParser.tests7) -}
73d2d9fb8065e06c5d5b5050aef71952
  tests60 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case TestParser.tests_eta1 of wild {
                   Data.Either.Left a1
                   -> case TestParser.tests61 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {}
                   Data.Either.Right a1
                   -> case GHC.Classes.$fEq[]_$c==
                             @ Defs.Pkg
                             Defs.$fEqPkg
                             a1 `cast` (Defs.N:Database[0])
                             TestParser.db117 of wild1 {
                        GHC.Types.False
                        -> case TestParser.tests61 s
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                           of {}
                        GHC.Types.True -> (# s, GHC.Types.[] @ GHC.Types.Char #) } }) -}
64976d7d4b6eb33e0d55a5c38afdad5d
  tests61 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
80887c917730d82af8f75986dbc12bb2
  tests62 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.tests63) -}
20868c65fa3aecd3eaa150fc6c82db68
  tests63 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("case sensitive pnames"#) -}
7ff5c1cb71f3b66198eb73829db43219
  tests64 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   TestParser.tests67
                   TestParser.tests65
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
5f5de12857e67fa8259ac9b064208484
  tests65 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case TestParser.tests_eta2 of wild {
                   Data.Either.Left a1
                   -> case TestParser.tests66 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {}
                   Data.Either.Right a1
                   -> case GHC.Classes.$fEq[]_$c==
                             @ Defs.Pkg
                             Defs.$fEqPkg
                             a1 `cast` (Defs.N:Database[0])
                             TestParser.db115 of wild1 {
                        GHC.Types.False
                        -> case TestParser.tests66 s
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                           of {}
                        GHC.Types.True -> (# s, GHC.Types.[] @ GHC.Types.Char #) } }) -}
9c27d8dea0300eeb244cc9ea6139acde
  tests66 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
96444a81703058096fb381cf7eae873f
  tests67 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.tests68) -}
0b4def9f2b489cb6cdb8a2456b52a94f
  tests68 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("case insensitive keywords"#) -}
e162369659971b0d44a0c543941101c9
  tests69 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   TestParser.tests72
                   TestParser.tests70
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
0cd53384f34aceb0668e66cbf9b02d03
  tests7 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   TestParser.tests74
                   TestParser.tests8) -}
df68b38691ab07ae4aec416ff430b746
  tests70 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case TestParser.tests_eta3 of wild {
                   Data.Either.Left a1
                   -> case TestParser.tests71 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {}
                   Data.Either.Right a1
                   -> case GHC.Classes.$fEq[]_$c==
                             @ Defs.Pkg
                             Defs.$fEqPkg
                             a1 `cast` (Defs.N:Database[0])
                             TestParser.db115 of wild1 {
                        GHC.Types.False
                        -> case TestParser.tests71 s
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                           of {}
                        GHC.Types.True -> (# s, GHC.Types.[] @ GHC.Types.Char #) } }) -}
d9d1724ad5661d575e8acb42689ed3c6
  tests71 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
d4df9dfd052208e69bd33e45cf03fd06
  tests72 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.tests73) -}
b70e645459e33a3a2d0d4699bf146a09
  tests73 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("semicolon in string"#) -}
956ff3c54e716f91b5c232bae8d05115
  tests74 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   TestParser.tests77
                   TestParser.tests75
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
ee0002cffc31deadc46c3b63a189b9f2
  tests75 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case TestParser.tests_eta4 of wild {
                   Data.Either.Left a1
                   -> case TestParser.tests76 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {}
                   Data.Either.Right a1
                   -> case GHC.Classes.$fEq[]_$c==
                             @ Defs.Pkg
                             Defs.$fEqPkg
                             a1 `cast` (Defs.N:Database[0])
                             TestParser.db55 of wild1 {
                        GHC.Types.False
                        -> case TestParser.tests76 s
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                           of {}
                        GHC.Types.True -> (# s, GHC.Types.[] @ GHC.Types.Char #) } }) -}
299426268521e616c6298d9cd806578a
  tests76 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
324d8f9aa6108614e7201059ad1c54f6
  tests77 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.tests78) -}
9bac60debb42ec330e16733c5795849a
  tests78 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("comments"#) -}
78d439e9b7dda4bf577dcdc4b27cd812
  tests79 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   TestParser.tests82
                   TestParser.tests80
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
64a48e7e219a3cba8c132d6f9b2c0dbb
  tests8 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   TestParser.tests69
                   TestParser.tests9) -}
ebe8700abd7aeb1cf2f842c02e3e27f7
  tests80 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case TestParser.tests_eta5 of wild {
                   Data.Either.Left a1
                   -> case TestParser.tests81 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {}
                   Data.Either.Right a1
                   -> case GHC.Classes.$fEq[]_$c==
                             @ Defs.Pkg
                             Defs.$fEqPkg
                             a1 `cast` (Defs.N:Database[0])
                             TestParser.db107 of wild1 {
                        GHC.Types.False
                        -> case TestParser.tests81 s
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                           of {}
                        GHC.Types.True -> (# s, GHC.Types.[] @ GHC.Types.Char #) } }) -}
0dc1c70dcc7d41bd55f4ac5fafdd8f04
  tests81 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
6a71f8c2f10cb45fe00fb11c6cc700e7
  tests82 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.tests83) -}
30caf177741dfc302f6d8561bf94ec9a
  tests83 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("implicit version range (conflicts)"#) -}
2c622d8b44182b53f4f7c88d213125c8
  tests84 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   TestParser.tests87
                   TestParser.tests85
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
3f7d7ef1d78e0e7fe897842091b2b7b4
  tests85 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case TestParser.tests_eta6 of wild {
                   Data.Either.Left a1
                   -> case TestParser.tests86 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {}
                   Data.Either.Right a1
                   -> case GHC.Classes.$fEq[]_$c==
                             @ Defs.Pkg
                             Defs.$fEqPkg
                             a1 `cast` (Defs.N:Database[0])
                             TestParser.db94 of wild1 {
                        GHC.Types.False
                        -> case TestParser.tests86 s
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                           of {}
                        GHC.Types.True -> (# s, GHC.Types.[] @ GHC.Types.Char #) } }) -}
045ebbd2229e4654d37921e12d87c040
  tests86 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
ffdd8e4dfbbcf965a7a0d2a185d908a3
  tests87 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.tests88) -}
2473131fc8e9ffc2f82c3f9682735fe3
  tests88 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("implicit version range (requires)"#) -}
6419709e0b50a64930342f0247e9fdf5
  tests89 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   TestParser.tests92
                   TestParser.tests90
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
f7dc504441487a4f5829d56951c5c293
  tests9 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   TestParser.tests64
                   TestParser.tests10) -}
4db7557ce286e631d0a2c53dff03da7a
  tests90 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Text.Parsec.Prim.runPT
                         @ GHC.Base.String
                         @ Data.Functor.Identity.Identity
                         @ GHC.Types.Char
                         @ ()
                         @ Defs.Database
                         (ParserImpl.$s$fStream[]mtok @ GHC.Types.Char)
                         ParserImpl.parseDatabase1
                           `cast`
                         (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                   <[GHC.Types.Char]>_R
                                   <()>_R
                                   <Data.Functor.Identity.Identity>_R
                                   <Defs.Database>_R))
                         GHC.Tuple.()
                         (GHC.Types.[] @ GHC.Types.Char)
                         TestParser.src4)
                        `cast`
                      (Data.Functor.Identity.N:Identity[0]
                           <Data.Either.Either
                              Text.Parsec.Error.ParseError Defs.Database>_R) of wild {
                   Data.Either.Left e -> (# s, GHC.Types.[] @ GHC.Types.Char #)
                   Data.Either.Right v
                   -> case TestParser.tests91 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {} }) -}
00b224e47845f508a49518cf8e94bf6b
  tests91 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
eee406183c8ea27704e38de48356e725
  tests92 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.tests93) -}
056e7c6fef944fde51483e38e836a56a
  tests93 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("multiple names"#) -}
23402591363e50b553a1a44fbdb7fc4e
  tests94 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   TestParser.tests97
                   TestParser.tests95
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
8a17bda9d75f33cfca46300e0e58bea5
  tests95 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case TestParser.tests_eta7 of wild {
                   Data.Either.Left a1
                   -> case TestParser.tests96 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {}
                   Data.Either.Right a1
                   -> case GHC.Classes.$fEq[]_$c==
                             @ Defs.Pkg
                             Defs.$fEqPkg
                             a1 `cast` (Defs.N:Database[0])
                             TestParser.db55 of wild1 {
                        GHC.Types.False
                        -> case TestParser.tests96 s
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                           of {}
                        GHC.Types.True -> (# s, GHC.Types.[] @ GHC.Types.Char #) } }) -}
e8a818e2d064d34ca6f69507cb2abdb1
  tests96 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
6ce434e576598103536f07bbbc3abb81
  tests97 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TestParser.tests98) -}
20c8450b2eae9490a52e2911339b6a0b
  tests98 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("large"#) -}
95821873a5ef01ebc4aa610b0c645ed4
  tests99 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   TestParser.tests102
                   TestParser.tests100
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
fed38612318578240e9ea83e9f312a6f
  tests_eta :: Data.Either.Either Defs.ErrMsg Defs.Database
  {- Unfolding: (case (Text.Parsec.Prim.runPT
                         @ GHC.Base.String
                         @ Data.Functor.Identity.Identity
                         @ GHC.Types.Char
                         @ ()
                         @ Defs.Database
                         (ParserImpl.$s$fStream[]mtok @ GHC.Types.Char)
                         ParserImpl.parseDatabase1
                           `cast`
                         (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                   <[GHC.Types.Char]>_R
                                   <()>_R
                                   <Data.Functor.Identity.Identity>_R
                                   <Defs.Database>_R))
                         GHC.Tuple.()
                         (GHC.Types.[] @ GHC.Types.Char)
                         TestParser.src11)
                        `cast`
                      (Data.Functor.Identity.N:Identity[0]
                           <Data.Either.Either
                              Text.Parsec.Error.ParseError Defs.Database>_R) of wild {
                   Data.Either.Left e
                   -> Data.Either.Left
                        @ GHC.Base.String
                        @ Defs.Database
                        (Text.Parsec.Error.$fShowParseError_$cshow e)
                   Data.Either.Right v
                   -> Data.Either.Right @ Defs.ErrMsg @ Defs.Database v }) -}
d884783b95ddef8b53e3d815b4ccfb46
  tests_eta1 :: Data.Either.Either Defs.ErrMsg Defs.Database
  {- Unfolding: (case (Text.Parsec.Prim.runPT
                         @ GHC.Base.String
                         @ Data.Functor.Identity.Identity
                         @ GHC.Types.Char
                         @ ()
                         @ Defs.Database
                         (ParserImpl.$s$fStream[]mtok @ GHC.Types.Char)
                         ParserImpl.parseDatabase1
                           `cast`
                         (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                   <[GHC.Types.Char]>_R
                                   <()>_R
                                   <Data.Functor.Identity.Identity>_R
                                   <Defs.Database>_R))
                         GHC.Tuple.()
                         (GHC.Types.[] @ GHC.Types.Char)
                         TestParser.src9)
                        `cast`
                      (Data.Functor.Identity.N:Identity[0]
                           <Data.Either.Either
                              Text.Parsec.Error.ParseError Defs.Database>_R) of wild {
                   Data.Either.Left e
                   -> Data.Either.Left
                        @ GHC.Base.String
                        @ Defs.Database
                        (Text.Parsec.Error.$fShowParseError_$cshow e)
                   Data.Either.Right v
                   -> Data.Either.Right @ Defs.ErrMsg @ Defs.Database v }) -}
bebe39254c434a9a18476ecceee3d1b9
  tests_eta2 :: Data.Either.Either Defs.ErrMsg Defs.Database
  {- Unfolding: (case (Text.Parsec.Prim.runPT
                         @ GHC.Base.String
                         @ Data.Functor.Identity.Identity
                         @ GHC.Types.Char
                         @ ()
                         @ Defs.Database
                         (ParserImpl.$s$fStream[]mtok @ GHC.Types.Char)
                         ParserImpl.parseDatabase1
                           `cast`
                         (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                   <[GHC.Types.Char]>_R
                                   <()>_R
                                   <Data.Functor.Identity.Identity>_R
                                   <Defs.Database>_R))
                         GHC.Tuple.()
                         (GHC.Types.[] @ GHC.Types.Char)
                         TestParser.src8)
                        `cast`
                      (Data.Functor.Identity.N:Identity[0]
                           <Data.Either.Either
                              Text.Parsec.Error.ParseError Defs.Database>_R) of wild {
                   Data.Either.Left e
                   -> Data.Either.Left
                        @ GHC.Base.String
                        @ Defs.Database
                        (Text.Parsec.Error.$fShowParseError_$cshow e)
                   Data.Either.Right v
                   -> Data.Either.Right @ Defs.ErrMsg @ Defs.Database v }) -}
0ddf566f1153b62e6ae0f75baa481411
  tests_eta3 :: Data.Either.Either Defs.ErrMsg Defs.Database
  {- Unfolding: (case (Text.Parsec.Prim.runPT
                         @ GHC.Base.String
                         @ Data.Functor.Identity.Identity
                         @ GHC.Types.Char
                         @ ()
                         @ Defs.Database
                         (ParserImpl.$s$fStream[]mtok @ GHC.Types.Char)
                         ParserImpl.parseDatabase1
                           `cast`
                         (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                   <[GHC.Types.Char]>_R
                                   <()>_R
                                   <Data.Functor.Identity.Identity>_R
                                   <Defs.Database>_R))
                         GHC.Tuple.()
                         (GHC.Types.[] @ GHC.Types.Char)
                         TestParser.src7)
                        `cast`
                      (Data.Functor.Identity.N:Identity[0]
                           <Data.Either.Either
                              Text.Parsec.Error.ParseError Defs.Database>_R) of wild {
                   Data.Either.Left e
                   -> Data.Either.Left
                        @ GHC.Base.String
                        @ Defs.Database
                        (Text.Parsec.Error.$fShowParseError_$cshow e)
                   Data.Either.Right v
                   -> Data.Either.Right @ Defs.ErrMsg @ Defs.Database v }) -}
0ff1f8b330d722a45c46bab349eb019b
  tests_eta4 :: Data.Either.Either Defs.ErrMsg Defs.Database
  {- Unfolding: (case (Text.Parsec.Prim.runPT
                         @ GHC.Base.String
                         @ Data.Functor.Identity.Identity
                         @ GHC.Types.Char
                         @ ()
                         @ Defs.Database
                         (ParserImpl.$s$fStream[]mtok @ GHC.Types.Char)
                         ParserImpl.parseDatabase1
                           `cast`
                         (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                   <[GHC.Types.Char]>_R
                                   <()>_R
                                   <Data.Functor.Identity.Identity>_R
                                   <Defs.Database>_R))
                         GHC.Tuple.()
                         (GHC.Types.[] @ GHC.Types.Char)
                         TestParser.src3cmt)
                        `cast`
                      (Data.Functor.Identity.N:Identity[0]
                           <Data.Either.Either
                              Text.Parsec.Error.ParseError Defs.Database>_R) of wild {
                   Data.Either.Left e
                   -> Data.Either.Left
                        @ GHC.Base.String
                        @ Defs.Database
                        (Text.Parsec.Error.$fShowParseError_$cshow e)
                   Data.Either.Right v
                   -> Data.Either.Right @ Defs.ErrMsg @ Defs.Database v }) -}
4bd87fec298cf58020fd5de49f1eabc9
  tests_eta5 :: Data.Either.Either Defs.ErrMsg Defs.Database
  {- Unfolding: (case (Text.Parsec.Prim.runPT
                         @ GHC.Base.String
                         @ Data.Functor.Identity.Identity
                         @ GHC.Types.Char
                         @ ()
                         @ Defs.Database
                         (ParserImpl.$s$fStream[]mtok @ GHC.Types.Char)
                         ParserImpl.parseDatabase1
                           `cast`
                         (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                   <[GHC.Types.Char]>_R
                                   <()>_R
                                   <Data.Functor.Identity.Identity>_R
                                   <Defs.Database>_R))
                         GHC.Tuple.()
                         (GHC.Types.[] @ GHC.Types.Char)
                         TestParser.src6)
                        `cast`
                      (Data.Functor.Identity.N:Identity[0]
                           <Data.Either.Either
                              Text.Parsec.Error.ParseError Defs.Database>_R) of wild {
                   Data.Either.Left e
                   -> Data.Either.Left
                        @ GHC.Base.String
                        @ Defs.Database
                        (Text.Parsec.Error.$fShowParseError_$cshow e)
                   Data.Either.Right v
                   -> Data.Either.Right @ Defs.ErrMsg @ Defs.Database v }) -}
2bbfb8dcbc5fe43299a76ab8190d6375
  tests_eta6 :: Data.Either.Either Defs.ErrMsg Defs.Database
  {- Unfolding: (case (Text.Parsec.Prim.runPT
                         @ GHC.Base.String
                         @ Data.Functor.Identity.Identity
                         @ GHC.Types.Char
                         @ ()
                         @ Defs.Database
                         (ParserImpl.$s$fStream[]mtok @ GHC.Types.Char)
                         ParserImpl.parseDatabase1
                           `cast`
                         (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                   <[GHC.Types.Char]>_R
                                   <()>_R
                                   <Data.Functor.Identity.Identity>_R
                                   <Defs.Database>_R))
                         GHC.Tuple.()
                         (GHC.Types.[] @ GHC.Types.Char)
                         TestParser.src5)
                        `cast`
                      (Data.Functor.Identity.N:Identity[0]
                           <Data.Either.Either
                              Text.Parsec.Error.ParseError Defs.Database>_R) of wild {
                   Data.Either.Left e
                   -> Data.Either.Left
                        @ GHC.Base.String
                        @ Defs.Database
                        (Text.Parsec.Error.$fShowParseError_$cshow e)
                   Data.Either.Right v
                   -> Data.Either.Right @ Defs.ErrMsg @ Defs.Database v }) -}
da2aebd7f8e8e2d206e754e0c7031b6c
  tests_eta7 :: Data.Either.Either Defs.ErrMsg Defs.Database
  {- Unfolding: (case (Text.Parsec.Prim.runPT
                         @ GHC.Base.String
                         @ Data.Functor.Identity.Identity
                         @ GHC.Types.Char
                         @ ()
                         @ Defs.Database
                         (ParserImpl.$s$fStream[]mtok @ GHC.Types.Char)
                         ParserImpl.parseDatabase1
                           `cast`
                         (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                   <[GHC.Types.Char]>_R
                                   <()>_R
                                   <Data.Functor.Identity.Identity>_R
                                   <Defs.Database>_R))
                         GHC.Tuple.()
                         (GHC.Types.[] @ GHC.Types.Char)
                         TestParser.src3)
                        `cast`
                      (Data.Functor.Identity.N:Identity[0]
                           <Data.Either.Either
                              Text.Parsec.Error.ParseError Defs.Database>_R) of wild {
                   Data.Either.Left e
                   -> Data.Either.Left
                        @ GHC.Base.String
                        @ Defs.Database
                        (Text.Parsec.Error.$fShowParseError_$cshow e)
                   Data.Either.Right v
                   -> Data.Either.Right @ Defs.ErrMsg @ Defs.Database v }) -}
54037e99f293883b602570f2cb2e3014
  tests_eta8 :: Data.Either.Either Defs.ErrMsg Defs.Database
  {- Unfolding: (case (Text.Parsec.Prim.runPT
                         @ GHC.Base.String
                         @ Data.Functor.Identity.Identity
                         @ GHC.Types.Char
                         @ ()
                         @ Defs.Database
                         (ParserImpl.$s$fStream[]mtok @ GHC.Types.Char)
                         ParserImpl.parseDatabase1
                           `cast`
                         (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                   <[GHC.Types.Char]>_R
                                   <()>_R
                                   <Data.Functor.Identity.Identity>_R
                                   <Defs.Database>_R))
                         GHC.Tuple.()
                         (GHC.Types.[] @ GHC.Types.Char)
                         TestParser.src2)
                        `cast`
                      (Data.Functor.Identity.N:Identity[0]
                           <Data.Either.Either
                              Text.Parsec.Error.ParseError Defs.Database>_R) of wild {
                   Data.Either.Left e
                   -> Data.Either.Left
                        @ GHC.Base.String
                        @ Defs.Database
                        (Text.Parsec.Error.$fShowParseError_$cshow e)
                   Data.Either.Right v
                   -> Data.Either.Right @ Defs.ErrMsg @ Defs.Database v }) -}
a766168b0438f8be7abe81888b3dc79c
  tests_eta9 :: Data.Either.Either Defs.ErrMsg Defs.Database
  {- Unfolding: (case (Text.Parsec.Prim.runPT
                         @ GHC.Base.String
                         @ Data.Functor.Identity.Identity
                         @ GHC.Types.Char
                         @ ()
                         @ Defs.Database
                         (ParserImpl.$s$fStream[]mtok @ GHC.Types.Char)
                         ParserImpl.parseDatabase1
                           `cast`
                         (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                   <[GHC.Types.Char]>_R
                                   <()>_R
                                   <Data.Functor.Identity.Identity>_R
                                   <Defs.Database>_R))
                         GHC.Tuple.()
                         (GHC.Types.[] @ GHC.Types.Char)
                         TestParser.src1)
                        `cast`
                      (Data.Functor.Identity.N:Identity[0]
                           <Data.Either.Either
                              Text.Parsec.Error.ParseError Defs.Database>_R) of wild {
                   Data.Either.Left e
                   -> Data.Either.Left
                        @ GHC.Base.String
                        @ Defs.Database
                        (Text.Parsec.Error.$fShowParseError_$cshow e)
                   Data.Either.Right v
                   -> Data.Either.Right @ Defs.ErrMsg @ Defs.Database v }) -}
"SPEC/TestParser $fShowEither @ [Char] @ Database" [orphan] forall (v1 :: GHC.Show.Show
                                                                            Defs.Database)
                                                                   (v :: GHC.Show.Show
                                                                           [GHC.Types.Char])
  Data.Either.$fShowEither @ [GHC.Types.Char] @ Defs.Database v v1
  = TestParser.$s$fShowEither
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

