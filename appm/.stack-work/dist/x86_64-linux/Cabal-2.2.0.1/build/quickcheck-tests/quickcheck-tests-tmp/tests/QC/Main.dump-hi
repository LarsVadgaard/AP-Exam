
==================== FINAL INTERFACE ====================
2018-11-05 09:10:43.39729215 UTC

interface main:Main [orphan module] 8043
  interface hash: 90739272d6667b0f1978726999ffee35
  ABI hash: 065577d5223f8bb8f0b38c07642e0925
  export-list hash: 673405706d0245cf1fd85d4a16ceaf2b
  orphan hash: 8acf74878006851097de2de83dcd317a
  flag hash: c729b0d1c164d270ae525177dea51a99
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.alphanums
  Main.digits
  Main.genAvailDeps
  Main.genDeps
  Main.genRange
  Main.letters
  Main.lowers
  Main.main
  Main.mergeMultiple
  Main.prop_install_a
  Main.prop_install_b
  Main.prop_install_c
  Main.prop_install_d
  Main.prop_install_e
  Main.prop_install_f
  Main.prop_install_g
  Main.prop_parse_db
  Main.simple
  Main.tests
  Main.trim
  Main.uppers
  Main.validPNames
module dependencies: Properties
package dependencies: QuickCheck-2.11.3 ansi-terminal-0.8.0.4
                      ansi-wl-pprint-0.6.8.2 appm-0.0.0 array-0.5.2.0 async-2.2.1
                      base-4.11.1.0 binary-0.8.5.1 bytestring-0.10.8.2 clock-0.7.2
                      colour-2.3.4 containers-0.5.11.0 deepseq-1.4.3.0 ghc-boot-th-8.4.3
                      ghc-prim-0.5.2.0 hashable-1.2.7.0 integer-gmp-1.0.2.0 mtl-2.2.2
                      optparse-applicative-0.14.2.0 parsec-3.1.13.0 pretty-1.1.3.6
                      primitive-0.6.3.0 process-1.6.3.0 random-1.1 stm-2.4.5.0
                      tagged-0.8.5 tasty-1.1.0.3 tasty-quickcheck-0.10
                      template-haskell-2.13.0.0 text-1.2.3.0 tf-random-0.5 time-1.8.0.2
                      transformers-0.5.5.0 unbounded-delays-0.1.1.0 unix-2.7.2.2
                      wcwidth-0.0.2
orphans: stm-2.4.5.0:Control.Monad.STM
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show
         transformers-0.5.5.0:Control.Monad.Trans.Error
         colour-2.3.4:Data.Colour time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         clock-0.7.2:System.Clock containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.ByteArray tagged-0.8.5:Data.Tagged
                         tasty-1.1.0.3:Test.Tasty.Core
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
import  -/  QuickCheck-2.11.3:Test.QuickCheck.Arbitrary 749c030890709ce50a65277c8ad56400
import  -/  QuickCheck-2.11.3:Test.QuickCheck.Gen 18d7f741d47ea7234320fe42d69d1321
import  -/  appm-0.0.0:Defs 33704ed0d96c186bd2b1ffcf2d3c5e21
import  -/  appm-0.0.0:Solver b1272b863643bca228023a2cfc5165eb
import  -/  appm-0.0.0:SolverImpl 37041eaf1b368993062e4573a24ebe9f
import  -/  appm-0.0.0:Utils 56e11831633c003055841737133cc50e
import  -/  base-4.11.1.0:Control.Monad c5f960c67d822497578bffbd3e4c01cf
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:Data.Traversable 7ad4edb9184ea1ae8e73f6b94f115c8c
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  Properties 6cc822f359d8aacafe084c348143cd58
  exports: 31e63cccc97f80b9f633ef98d485b633
  install_a 8ff9be552bd049cd839bcc263710ef88
  install_b 26e0b60b9db05a8d5b53241c8bb79eb9
  install_c 6bb5b0f048ce506019c1c505b9aadaa9
  install_d 75c8f1a02fa718708a00dbac45ae01c2
  install_e dc6d130b468e848d72308d2a3c654ffd
  install_f ae63bc3d9e9d78c7b768ad88dfa06b24
  install_g e383eee1285a5a2c19205fa0d99b26e9
  parses_db 94657d8960684adc7d4696d88febfc4b
import  -/  tasty-1.1.0.3:Test.Tasty 3aee3445f1ab857a6b68dde2f15a99f9
import  -/  tasty-1.1.0.3:Test.Tasty.Core c12f1e13f1a16d28e3df29c23937c462
import  -/  tasty-quickcheck-0.10:Test.Tasty.QuickCheck a46fef7f90a3e4fd49e38b62a56f562b
da7defcdb1c6d8dbbb0ae4b7559fcc84
  $fArbitraryDatabase ::
    Test.QuickCheck.Arbitrary.Arbitrary Defs.Database
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Defs.Database
                  Main.$fArbitraryDatabase2
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] (Defs.N:Database[0])))
                  Main.$fArbitraryDatabase1
                    `cast`
                  (<Defs.Database>_R ->_R ([Sym (Defs.N:Database[0])])_R) -}
bceadb4de46864dff93302f762199cdf
  $fArbitraryDatabase1 :: Defs.Database -> [[Defs.Pkg]]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Defs.Database) ->
                 Test.QuickCheck.Arbitrary.shrinkList
                   @ Defs.Pkg
                   Main.$fArbitraryDatabase_$cshrink
                   ds `cast` (Defs.N:Database[0])) -}
78444932aadd941280662d6c3056248b
  $fArbitraryDatabase10 ::
    (GHC.Types.Int, Test.QuickCheck.Gen.Gen [GHC.Types.Char])
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.$fArbitraryDatabase12,
                  Main.$fArbitraryDatabase11
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <[GHC.Types.Char]>_R)))) -}
a7b8c0d2eefd6c32bbdd76a39ec5c03d
  $fArbitraryDatabase11 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: (\ (ds :: Test.QuickCheck.Random.QCGen)
                   (ds1 :: GHC.Types.Int) ->
                 GHC.Types.[] @ GHC.Types.Char) -}
5053c670ee648cf232400fd5ff82c1ec
  $fArbitraryDatabase12 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 5#) -}
40cbfd651a7d3734c6c6986c33852d0f
  $fArbitraryDatabase13 :: Test.QuickCheck.Gen.Gen Defs.Version
  {- Unfolding: (Test.QuickCheck.Gen.frequency
                   @ Defs.Version
                   Main.$fArbitraryDatabase14) -}
7d478aa67781a4bf5bf648a52fb1d533
  $fArbitraryDatabase14 ::
    [(GHC.Types.Int, Test.QuickCheck.Gen.Gen Defs.Version)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, Test.QuickCheck.Gen.Gen Defs.Version)
                   Main.$fArbitraryDatabase18
                   Main.$fArbitraryDatabase15) -}
a32f88608f03cc18312d3f4a792957d1
  $fArbitraryDatabase15 ::
    [(GHC.Types.Int, Test.QuickCheck.Gen.Gen Defs.Version)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, Test.QuickCheck.Gen.Gen Defs.Version)
                   Main.$fArbitraryDatabase16
                   (GHC.Types.[]
                      @ (GHC.Types.Int, Test.QuickCheck.Gen.Gen Defs.Version))) -}
e7842ac00f3a793c705735a2b1d4d768
  $fArbitraryDatabase16 ::
    (GHC.Types.Int, Test.QuickCheck.Gen.Gen Defs.Version)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.$fArbitraryDatabase9,
                  Main.$fArbitraryDatabase17
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] (Defs.N:Version[0]))))) -}
26cec84519cc7701abcb8b1c0da7290f
  $fArbitraryDatabase17 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> [Defs.VNum]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>m2,
     Unfolding: (\ (ds :: Test.QuickCheck.Random.QCGen)
                   (ds1 :: GHC.Types.Int) ->
                 Defs.prettyPkg2) -}
0c02c5202b947010588ecaefaf5da121
  $fArbitraryDatabase18 ::
    (GHC.Types.Int, Test.QuickCheck.Gen.Gen Defs.Version)
  {- Strictness: m,
     Unfolding: ((Main.$fArbitraryDatabase28,
                  Main.$fArbitraryDatabase19
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] (Defs.N:Version[0]))))) -}
76f50d2aedea4ef3cf3777ee181e859b
  $fArbitraryDatabase19 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> [Defs.VNum]
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,A>,
     Unfolding: InlineRule (2, True, False)
                (\ (r :: Test.QuickCheck.Random.QCGen) (n :: GHC.Types.Int) ->
                 case r `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.QuickCheck.Gen.$wlistOf1
                   @ Defs.VNum
                   Main.$fArbitraryDatabase20
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <Defs.VNum>_R))
                   ww1
                   ww2
                   ww3
                   ww4
                   5# }) -}
3744094713b414a5cc8287c55c6e59ab
  $fArbitraryDatabase2 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> [Defs.Pkg]
  {- Arity: 2,
     Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w1 of ww7 { GHC.Types.I# ww8 ->
                 Main.$w$carbitrary ww1 ww2 ww3 ww4 ww8 } }) -}
f258589e70cf4e33f7b3dbb24db97025
  $fArbitraryDatabase20 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Defs.VNum
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case Main.$w$carbitrary2
                        ww1
                        ww2
                        ww3
                        ww4
                        w1 of ww7 { (#,#) ww8 ww9 ->
                 Defs.VN ww8 ww9 } }) -}
273a1e9cb4423d8f448f958a8171342b
  $fArbitraryDatabase21 :: Test.QuickCheck.Gen.Gen [GHC.Types.Char]
  {- Unfolding: (Test.QuickCheck.Gen.frequency
                   @ [GHC.Types.Char]
                   Main.$fArbitraryDatabase22) -}
20a2755a856383d013a7ce4df002eb2e
  $fArbitraryDatabase22 ::
    [(GHC.Types.Int, Test.QuickCheck.Gen.Gen [GHC.Types.Char])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, Test.QuickCheck.Gen.Gen [GHC.Types.Char])
                   Main.$fArbitraryDatabase10
                   Main.$fArbitraryDatabase23) -}
064ccf93b53854c678235caa1927e3aa
  $fArbitraryDatabase23 ::
    [(GHC.Types.Int, Test.QuickCheck.Gen.Gen [GHC.Types.Char])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, Test.QuickCheck.Gen.Gen [GHC.Types.Char])
                   Main.$fArbitraryDatabase24
                   (GHC.Types.[]
                      @ (GHC.Types.Int, Test.QuickCheck.Gen.Gen [GHC.Types.Char]))) -}
92cd4902f3aa66eda38c07ba5ac30c44
  $fArbitraryDatabase24 ::
    (GHC.Types.Int, Test.QuickCheck.Gen.Gen [GHC.Types.Char])
  {- Strictness: m,
     Unfolding: ((Main.$fArbitraryDatabase9,
                  Main.$fArbitraryDatabase25
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <[GHC.Types.Char]>_R)))) -}
57a69cc177c82246926f5b6f3e871174
  $fArbitraryDatabase25 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,A>,
     Unfolding: (\ (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 case eta
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.QuickCheck.Gen.$wlistOf1
                   @ GHC.Types.Char
                   Main.$fArbitraryDatabase26
                   ww1
                   ww2
                   ww3
                   ww4
                   4# }) -}
fffef67e38d5db5d6d0df6e6926c232a
  $fArbitraryDatabase26 :: Test.QuickCheck.Gen.Gen GHC.Types.Char
  {- Unfolding: (Test.QuickCheck.Gen.elements
                   @ GHC.Types.Char
                   Main.lowers) -}
2be574f2eaaca8efacfbfbab802beeb3
  $fArbitraryDatabase27 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
35ef722d4fd5d2ccdf2814f31545588c
  $fArbitraryDatabase28 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 4#) -}
9bc5f62a011cbbf8a8c8122b67c43071
  $fArbitraryDatabase29 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>m2,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case Main.$wsimple ww1 ww2 ww3 ww4 w1 of ww7 { (#,#) ww8 ww9 ->
                 GHC.Types.: @ GHC.Types.Char ww8 ww9 } }) -}
edab418336943086ae5169b4dcd9a385
  $fArbitraryDatabase3 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Defs.Pkg
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case Main.$w$carbitrary1
                        ww1
                        ww2
                        ww3
                        ww4
                        w1 of ww7 { (#,,,#) ww8 ww9 ww10 ww11 ->
                 Defs.Pkg ww8 ww9 ww10 ww11 } }) -}
fdb839b50c8b9a0ab704d0ac4148557f
  $fArbitraryDatabase30 :: Test.QuickCheck.Gen.Gen [GHC.Types.Char]
  {- Unfolding: (Test.QuickCheck.Gen.frequency
                   @ [GHC.Types.Char]
                   Main.$fArbitraryDatabase31) -}
81c91193d968aa9f8df8c336b1ef4b63
  $fArbitraryDatabase31 ::
    [(GHC.Types.Int, Test.QuickCheck.Gen.Gen [GHC.Types.Char])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, Test.QuickCheck.Gen.Gen [GHC.Types.Char])
                   Main.$fArbitraryDatabase40
                   Main.$fArbitraryDatabase32) -}
61ad222bb7d311f2289d88e2e5d60f85
  $fArbitraryDatabase32 ::
    [(GHC.Types.Int, Test.QuickCheck.Gen.Gen [GHC.Types.Char])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, Test.QuickCheck.Gen.Gen [GHC.Types.Char])
                   Main.$fArbitraryDatabase37
                   Main.$fArbitraryDatabase33) -}
af31c900938bcd9508befe65d319b781
  $fArbitraryDatabase33 ::
    [(GHC.Types.Int, Test.QuickCheck.Gen.Gen [GHC.Types.Char])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, Test.QuickCheck.Gen.Gen [GHC.Types.Char])
                   Main.$fArbitraryDatabase34
                   (GHC.Types.[]
                      @ (GHC.Types.Int, Test.QuickCheck.Gen.Gen [GHC.Types.Char]))) -}
7e0b87175905aa02cb9ed5a90e7f7958
  $fArbitraryDatabase34 ::
    (GHC.Types.Int, Test.QuickCheck.Gen.Gen [GHC.Types.Char])
  {- Strictness: m,
     Unfolding: ((Main.$fArbitraryDatabase9,
                  Main.$fArbitraryDatabase35
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <[GHC.Types.Char]>_R)))) -}
d071bc9cc539fa0d94f239a00342fa6c
  $fArbitraryDatabase35 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>m2,
     Unfolding: (\ (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 case w2
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww1
                        ww2
                        ww3
                        ww4 of ww7 { (#,#) ww8 ww9 ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   Main.$fArbitraryDatabase36
                   (GHC.Types.:
                      @ GHC.Types.Char
                      (Main.$fArbitraryDatabase_w
                         `cast`
                       (Test.QuickCheck.Gen.N:Gen[0] <GHC.Types.Char>_R)
                         ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                         w3)
                      (GHC.Types.[] @ GHC.Types.Char)) } }) -}
d1a3cd903033d46bff244cda22f175f6
  $fArbitraryDatabase36 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '-'#) -}
6899457301c8ece0c25e0d107760b45e
  $fArbitraryDatabase37 ::
    (GHC.Types.Int, Test.QuickCheck.Gen.Gen [GHC.Types.Char])
  {- Strictness: m,
     Unfolding: ((Main.$fArbitraryDatabase39,
                  Main.$fArbitraryDatabase38
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <[GHC.Types.Char]>_R)))) -}
5b5e54fbef213bfdd13923e14debe8fd
  $fArbitraryDatabase38 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>m2,
     Unfolding: (\ (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 case w2
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww1
                        ww2
                        ww3
                        ww4 of ww7 { (#,#) ww8 ww9 ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   (Main.$fArbitraryDatabase_w1
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <GHC.Types.Char>_R)
                      ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                      w3)
                   (GHC.Types.[] @ GHC.Types.Char) } }) -}
21a043f6dd021b10c81fb6ab6ef1a7e7
  $fArbitraryDatabase39 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
5070cb834114c22c7a09066e4d9c986d
  $fArbitraryDatabase4 :: Test.QuickCheck.Gen.Gen [GHC.Types.Char]
  {- Unfolding: (Test.QuickCheck.Gen.frequency
                   @ [GHC.Types.Char]
                   Main.$fArbitraryDatabase5) -}
099ec9caeac6ad8249d36c73805ab330
  $fArbitraryDatabase40 ::
    (GHC.Types.Int, Test.QuickCheck.Gen.Gen [GHC.Types.Char])
  {- Strictness: m,
     Unfolding: ((Main.$fArbitraryDatabase12,
                  Main.$fArbitraryDatabase41
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <[GHC.Types.Char]>_R)))) -}
35dbdbf1d464958f383e9287e77ec5de
  $fArbitraryDatabase41 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>m2,
     Unfolding: (\ (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 case w2
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww1
                        ww2
                        ww3
                        ww4 of ww7 { (#,#) ww8 ww9 ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   (Main.$fArbitraryDatabase_w2
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <GHC.Types.Char>_R)
                      ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                      w3)
                   (GHC.Types.[] @ GHC.Types.Char) } }) -}
c44372f57f3c7f864c69411f1324abb7
  $fArbitraryDatabase42 ::
    [Defs.Pkg]
    -> Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> [Defs.Pkg]
  {- Arity: 3, Strictness: <S,U><L,1*U(U,U,U,1*U,A,A)><L,U(U)>,
     Unfolding: (\ (pkgs :: [Defs.Pkg])
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 letrec {
                   go :: [Defs.Pkg]
                         -> Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> [Defs.Pkg]
                     {- Arity: 3, Strictness: <S,1*U><L,1*U(U,U,U,1*U,A,A)><L,U(U)> -}
                   = \ (ds :: [Defs.Pkg])
                       (eta2 :: Test.QuickCheck.Random.QCGen)
                       (eta3 :: GHC.Types.Int) ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ Defs.Pkg
                       : y ys
                       -> case eta2
                                 `cast`
                               (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                          case System.Random.TF.Gen.$wtfGenSplit
                                 ww1
                                 ww2
                                 ww3
                                 ww4 of ww7 { (#,#) ww8 ww9 ->
                          GHC.Types.:
                            @ Defs.Pkg
                            (case ww8 of ww11 { System.Random.TF.Gen.TFGen ww12 ww13 ww14 ww15 ww16 ww17 ->
                             case System.Random.TF.Gen.$wtfGenSplit
                                    ww12
                                    ww13
                                    ww14
                                    ww15 of ww18 { (#,#) ww19 ww20 ->
                             case y of wild1 { Defs.Pkg ds1 ds2 ds3 ds4 ->
                             Defs.Pkg
                               ds1
                               ds2
                               ds3
                               (case ww19 of ww21 { System.Random.TF.Gen.TFGen ww22 ww23 ww24 ww25 ww26 ww27 ->
                                Main.$wgenAvailDeps wild1 pkgs ww22 ww23 ww24 ww25 eta3 }) } } })
                            (go
                               ys
                               ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                               eta3) } } }
                 } in
                 go pkgs eta eta1) -}
4e64c8d81e739af1db7a0a81e4c4913f
  $fArbitraryDatabase43 ::
    [Defs.Pkg]
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Arity: 3, Strictness: <S,1*U><L,1*U(U,U,U,1*U,A,A)><L,U(U)> -}
8929f8a38fb972bd6ad6c3c4232fcf35
  $fArbitraryDatabase44 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (3) -}
a85e579d45fcc061b673b9016990ec55
  $fArbitraryDatabase45 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
17edf0e6b82cbf243d5fb718fa110f17
  $fArbitraryDatabase5 ::
    [(GHC.Types.Int, Test.QuickCheck.Gen.Gen [GHC.Types.Char])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, Test.QuickCheck.Gen.Gen [GHC.Types.Char])
                   Main.$fArbitraryDatabase10
                   Main.$fArbitraryDatabase6) -}
de2b565b0311ac5fe57a790084af8e1a
  $fArbitraryDatabase6 ::
    [(GHC.Types.Int, Test.QuickCheck.Gen.Gen [GHC.Types.Char])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, Test.QuickCheck.Gen.Gen [GHC.Types.Char])
                   Main.$fArbitraryDatabase7
                   (GHC.Types.[]
                      @ (GHC.Types.Int, Test.QuickCheck.Gen.Gen [GHC.Types.Char]))) -}
e7539a3924c4dd6377432f88374d178d
  $fArbitraryDatabase7 ::
    (GHC.Types.Int, Test.QuickCheck.Gen.Gen [GHC.Types.Char])
  {- Strictness: m,
     Unfolding: ((Main.$fArbitraryDatabase9,
                  Main.$fArbitraryDatabase8
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <[GHC.Types.Char]>_R)))) -}
7088992ba179d319640e42a4cec7786c
  $fArbitraryDatabase8 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,A>,
     Unfolding: (\ (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 case eta
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.QuickCheck.Gen.$wlistOf1
                   @ GHC.Types.Char
                   Test.QuickCheck.Arbitrary.$fArbitraryChar_$carbitrary
                   ww1
                   ww2
                   ww3
                   ww4
                   15# }) -}
03fcdeef5d575d492a70cf709c94bd98
  $fArbitraryDatabase9 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
69d887f42c25196c2076615abfa46430
  $fArbitraryDatabase_$cshrink :: Defs.Pkg -> [Defs.Pkg]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Defs.Pkg) -> GHC.Types.[] @ Defs.Pkg) -}
251f52b1e9d0a42cfc7dbe71576ef1c0
  $fArbitraryDatabase_go :: [[GHC.Types.Char]] -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
b4a174c02c25d895b77d664adbb4b0eb
  $fArbitraryDatabase_go1 ::
    [(Defs.PName, Defs.PConstr)] -> Defs.Constrs -> Defs.Constrs
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
b53ae796c74e67e057f84cdc156e0e9e
  $fArbitraryDatabase_w :: Test.QuickCheck.Gen.Gen GHC.Types.Char
  {- Unfolding: (Test.QuickCheck.Gen.elements
                   @ GHC.Types.Char
                   Main.alphanums) -}
863394acec5178f69b13282ed9eee435
  $fArbitraryDatabase_w1 :: Test.QuickCheck.Gen.Gen GHC.Types.Char
  {- Unfolding: (Test.QuickCheck.Gen.elements
                   @ GHC.Types.Char
                   Main.digits) -}
f08631dc72a7a42e6902b50fe7bb37ad
  $fArbitraryDatabase_w2 :: Test.QuickCheck.Gen.Gen GHC.Types.Char
  {- Unfolding: (Test.QuickCheck.Gen.elements
                   @ GHC.Types.Char
                   Main.letters) -}
c039ebda1d7ff28ecaebd4844b74d361
  $fArbitraryPName :: Test.QuickCheck.Arbitrary.Arbitrary Defs.PName
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Defs.PName
                  Main.$fArbitraryDatabase29
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] (Defs.N:PName[0])))
                  Main.$fArbitraryPName_$cshrink -}
9da5757b9236ff69ad0cf6c1840cf7e5
  $fArbitraryPName_$cshrink :: Defs.PName -> [Defs.PName]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Defs.PName) -> GHC.Types.[] @ Defs.PName) -}
c153d8cf6ad8d1a5c4e3be80139219bc
  $fArbitraryPkg :: Test.QuickCheck.Arbitrary.Arbitrary Defs.Pkg
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Defs.Pkg
                  Main.$fArbitraryDatabase3
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <Defs.Pkg>_R))
                  Main.$fArbitraryDatabase_$cshrink -}
a775a86a63c7d94571153583d44c6b05
  $fArbitraryVNum :: Test.QuickCheck.Arbitrary.Arbitrary Defs.VNum
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Defs.VNum
                  Main.$fArbitraryDatabase20
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <Defs.VNum>_R))
                  Main.$fArbitraryVNum_$cshrink -}
8c9a25449d701a68ee0b7fb526a9cbf6
  $fArbitraryVNum_$cshrink :: Defs.VNum -> [Defs.VNum]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Defs.VNum) -> GHC.Types.[] @ Defs.VNum) -}
8583c6aa341f1ea0e0ea081ae56a8729
  $fArbitraryVersion ::
    Test.QuickCheck.Arbitrary.Arbitrary Defs.Version
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Defs.Version
                  Main.$fArbitraryDatabase19
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] (Defs.N:Version[0])))
                  Main.$fArbitraryVersion_$cshrink -}
192387a8c1f78631d086ac7b2fa56406
  $fArbitraryVersion_$cshrink :: Defs.Version -> [Defs.Version]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Defs.Version) -> GHC.Types.[] @ Defs.Version) -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
62d6a44a47be0fe85004402ed8980de8
  $w$carbitrary ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> [Defs.Pkg]
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.Int#) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 case ww8 of ww5 { System.Random.TF.Gen.TFGen ww6 ww10 ww11 ww12 ww13 ww14 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww6
                        ww10
                        ww11
                        ww12 of ww15 { (#,#) ww16 ww17 ->
                 case ww16 of ww18 { System.Random.TF.Gen.TFGen ww19 ww20 ww21 ww22 ww23 ww24 ->
                 let {
                   n :: GHC.Types.Int = GHC.Types.I# ww4
                 } in
                 Main.$fArbitraryDatabase42
                   ((Main.trim
                       (Test.QuickCheck.Gen.$wlistOf1
                          @ Defs.Pkg
                          Main.$fArbitraryDatabase3
                            `cast`
                          (Sym (Test.QuickCheck.Gen.N:Gen[0] <Defs.Pkg>_R))
                          ww19
                          ww20
                          ww21
                          ww22
                          ww4))
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <[Defs.Pkg]>_R)
                      ww17 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                      n)
                   ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                   n } } } }) -}
784dcf8d0588a0fe9f136d81e6dbe859
  $w$carbitrary1 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> (# Defs.PName, Defs.Version, GHC.Base.String, Defs.Constrs #)
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 case ww9 of ww4 { System.Random.TF.Gen.TFGen ww5 ww6 ww10 ww11 ww12 ww13 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww5
                        ww6
                        ww10
                        ww11 of ww14 { (#,#) ww15 ww16 ->
                 case ww16 of ww17 { System.Random.TF.Gen.TFGen ww18 ww19 ww20 ww21 ww22 ww23 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww18
                        ww19
                        ww20
                        ww21 of ww24 { (#,#) ww25 ww26 ->
                 (# case ww8 of ww27 { System.Random.TF.Gen.TFGen ww28 ww29 ww30 ww31 ww32 ww33 ->
                    case System.Random.TF.Gen.$wtfGenSplit
                           ww28
                           ww29
                           ww30
                           ww31 of ww34 { (#,#) ww35 ww36 ->
                    case ww35 of ww37 { System.Random.TF.Gen.TFGen ww38 ww39 ww40 ww41 ww42 ww43 ->
                    case w of ww44 { GHC.Types.I# ww45 ->
                    (Test.QuickCheck.Gen.elements
                       @ Defs.PName
                       (Data.OldList.nubBy
                          @ Defs.PName
                          GHC.Base.eqString
                            `cast`
                          (Sym (Defs.N:PName[0])
                           ->_R Sym (Defs.N:PName[0])
                           ->_R <GHC.Types.Bool>_R)
                          (Test.QuickCheck.Gen.$wlistOf1
                             @ Defs.PName
                             Main.$fArbitraryDatabase29
                               `cast`
                             (Sym (Test.QuickCheck.Gen.N:Gen[0] (Defs.N:PName[0])))
                             ww38
                             ww39
                             ww40
                             ww41
                             ww45)))
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <Defs.PName>_R)
                      ww36 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                      ww44 } } } },
                    Main.$fArbitraryDatabase13
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <Defs.Version>_R)
                      ww15 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                      w,
                    Main.$fArbitraryDatabase4
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <[GHC.Types.Char]>_R)
                      ww25 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                      w,
                    GHC.Types.[] @ (Defs.PName, Defs.PConstr) #) } } } } }) -}
35cb77c2d61db78c2e0de9a074715eef
  $w$carbitrary2 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> (# GHC.Types.Int, GHC.Base.String #)
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 case ww9 of ww4 { System.Random.TF.Gen.TFGen ww5 ww6 ww10 ww11 ww12 ww13 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww5
                        ww6
                        ww10
                        ww11 of ww14 { (#,#) ww15 ww16 ->
                 (# case w of wild { GHC.Types.I# i ->
                    case System.Random.$wrandomIvalInteger
                           @ Test.QuickCheck.Random.QCGen
                           @ GHC.Types.Int
                           Test.QuickCheck.Random.$fRandomGenQCGen
                           GHC.Num.$fNumInt
                           Main.$fArbitraryDatabase27
                           (GHC.Integer.Type.smallInteger i)
                           ww8
                             `cast`
                           (Sym (Test.QuickCheck.Random.N:QCGen[0])) of ww17 { (#,#) ww18 ww19 ->
                    ww18 } },
                    Main.$fArbitraryDatabase21
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <[GHC.Types.Char]>_R)
                      ww15 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                      w #) } } }) -}
c04cb6f2ed8c822d37ce03128edef0ee
  $w$sgenRange ::
    Defs.Version
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> (# Defs.Version, Defs.Version #)
  {- Arity: 6, Strictness: <L,U><S,U><S,U><S,U><S,1*U><L,U(U)>,
     Inline: [0],
     Unfolding: (\ (w :: Defs.Version)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 case ww9 of ww4 { System.Random.TF.Gen.TFGen ww5 ww6 ww10 ww11 ww12 ww13 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww5
                        ww6
                        ww10
                        ww11 of ww14 { (#,#) ww15 ww16 ->
                 (# case ww8 of ww17 { System.Random.TF.Gen.TFGen ww18 ww19 ww20 ww21 ww22 ww23 ->
                    case w1 of ww24 { GHC.Types.I# ww25 ->
                    Test.QuickCheck.Gen.$wsuchThat
                      @ Defs.Version
                      Main.$fArbitraryDatabase19
                        `cast`
                      (Sym (Test.QuickCheck.Gen.N:Gen[0] (Defs.N:Version[0])))
                      (\ (ds :: Defs.Version) ->
                       Defs.$fOrdVersion5
                         ds `cast` (Defs.N:Version[0])
                         w `cast` (Defs.N:Version[0]))
                      ww18
                      ww19
                      ww20
                      ww21
                      ww25 } },
                    case ww15 of ww17 { System.Random.TF.Gen.TFGen ww18 ww19 ww20 ww21 ww22 ww23 ->
                    case w1 of ww24 { GHC.Types.I# ww25 ->
                    Test.QuickCheck.Gen.$wsuchThat
                      @ Defs.Version
                      Main.$fArbitraryDatabase19
                        `cast`
                      (Sym (Test.QuickCheck.Gen.N:Gen[0] (Defs.N:Version[0])))
                      (\ (ds :: Defs.Version) ->
                       Defs.$fOrdVersion4
                         ds `cast` (Defs.N:Version[0])
                         w `cast` (Defs.N:Version[0]))
                      ww18
                      ww19
                      ww20
                      ww21
                      ww25 } } #) } } }) -}
544f7c5a0274c4ea461828b251d21c1d
  $wgenAvailDeps ::
    Defs.Pkg
    -> [Defs.Pkg]
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Defs.Constrs
  {- Arity: 7,
     Strictness: <L,1*U(1*U,A,A,A)><L,1*U><S,U><S,U><S,U><S,1*U><L,U(U)>,
     Inline: [0],
     Unfolding: (\ (w :: Defs.Pkg)
                   (w1 :: [Defs.Pkg])
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w2 :: GHC.Types.Int) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 case ww9 of ww4 { System.Random.TF.Gen.TFGen ww5 ww6 ww10 ww11 ww12 ww13 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww5
                        ww6
                        ww10
                        ww11 of ww14 { (#,#) ww15 ww16 ->
                 case ww16 of ww17 { System.Random.TF.Gen.TFGen ww18 ww19 ww20 ww21 ww22 ww23 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww18
                        ww19
                        ww20
                        ww21 of ww24 { (#,#) ww25 ww26 ->
                 case System.Random.$wrandomIvalInteger
                        @ Test.QuickCheck.Random.QCGen
                        @ GHC.Types.Int
                        Test.QuickCheck.Random.$fRandomGenQCGen
                        GHC.Num.$fNumInt
                        Main.$fArbitraryDatabase45
                        Main.$fArbitraryDatabase44
                        ww8
                          `cast`
                        (Sym (Test.QuickCheck.Random.N:QCGen[0])) of ww27 { (#,#) ww28 ww29 ->
                 case ww28 of wild1 { GHC.Types.I# y ->
                 case GHC.Prim.<# 0# y of lwild {
                   DEFAULT
                   -> case Main.$fArbitraryDatabase43
                             (GHC.Types.[] @ Defs.Pkg)
                             ww25 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                             w2 of wild {
                        [] -> GHC.Types.[] @ (Defs.PName, Defs.PConstr)
                        : c cs
                        -> Main.$fArbitraryDatabase_go1
                             cs
                             (GHC.Types.[] @ (Defs.PName, Defs.PConstr)) }
                   1#
                   -> let {
                        lvl1 :: Defs.PName
                        = case w of wild { Defs.Pkg ds4 ds5 ds6 ds7 -> ds4 }
                      } in
                      case Main.$fArbitraryDatabase43
                             (GHC.List.$wunsafeTake
                                @ Defs.Pkg
                                y
                                (Test.QuickCheck.Gen.sublistOf2
                                   @ Defs.Pkg
                                   (GHC.List.filter
                                      @ Defs.Pkg
                                      (\ (pkg' :: Defs.Pkg) ->
                                       case pkg' of wild { Defs.Pkg ds4 ds5 ds6 ds7 ->
                                       case GHC.Classes.$fEqModule_$s$c==
                                              ds4 `cast` (Defs.N:PName[0])
                                              lvl1 `cast` (Defs.N:PName[0]) of wild2 {
                                         GHC.Types.False -> GHC.Types.True
                                         GHC.Types.True -> GHC.Types.False } })
                                      w1)
                                   ww15 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))))
                             ww25 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                             w2 of wild {
                        [] -> GHC.Types.[] @ (Defs.PName, Defs.PConstr)
                        : c cs
                        -> Main.$fArbitraryDatabase_go1
                             cs
                             (GHC.Types.[] @ (Defs.PName, Defs.PConstr)) } } } } } } } } }) -}
b4090ae2b580d87880e8fbb857b07330
  $wgenRange ::
    (Test.QuickCheck.Arbitrary.Arbitrary b, GHC.Classes.Ord b) =>
    b
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> (# b, b #)
  {- Arity: 8,
     Strictness: <L,U(C(C1(U)),A)><L,U(A,A,A,C(C1(U)),C(C1(U)),A,A,A)><L,U><S,U><S,U><S,U><S,1*U><L,U(U)>,
     Inline: [0],
     Unfolding: (\ @ b
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (w1 :: GHC.Classes.Ord b)
                   (w2 :: b)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w3 :: GHC.Types.Int) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 case ww9 of ww4 { System.Random.TF.Gen.TFGen ww5 ww6 ww10 ww11 ww12 ww13 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww5
                        ww6
                        ww10
                        ww11 of ww14 { (#,#) ww15 ww16 ->
                 (# case ww8 of ww17 { System.Random.TF.Gen.TFGen ww18 ww19 ww20 ww21 ww22 ww23 ->
                    case w3 of ww24 { GHC.Types.I# ww25 ->
                    Test.QuickCheck.Gen.$wsuchThat
                      @ b
                      (Test.QuickCheck.Arbitrary.arbitrary @ b w)
                      (\ (ds :: b) -> GHC.Classes.<= @ b w1 ds w2)
                      ww18
                      ww19
                      ww20
                      ww21
                      ww25 } },
                    case ww15 of ww17 { System.Random.TF.Gen.TFGen ww18 ww19 ww20 ww21 ww22 ww23 ->
                    case w3 of ww24 { GHC.Types.I# ww25 ->
                    Test.QuickCheck.Gen.$wsuchThat
                      @ b
                      (Test.QuickCheck.Arbitrary.arbitrary @ b w)
                      (\ (ds :: b) -> GHC.Classes.> @ b w1 ds w2)
                      ww18
                      ww19
                      ww20
                      ww21
                      ww25 } } #) } } }) -}
8cc464bcce6fb74e104af9e091290e3f
  $wsimple ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> (# GHC.Types.Char, [GHC.Types.Char] #)
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 case ww9 of ww4 { System.Random.TF.Gen.TFGen ww5 ww6 ww10 ww11 ww12 ww13 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww5
                        ww6
                        ww10
                        ww11 of ww14 { (#,#) ww15 ww16 ->
                 (# Main.$fArbitraryDatabase26
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <GHC.Types.Char>_R)
                      ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                      w,
                    case ww15 of ww17 { System.Random.TF.Gen.TFGen ww18 ww19 ww20 ww21 ww22 ww23 ->
                    Main.$fArbitraryDatabase_go
                      (Test.QuickCheck.Gen.$wlistOf
                         @ [GHC.Types.Char]
                         Main.$fArbitraryDatabase30
                         ww18
                         ww19
                         ww20
                         ww21
                         7#) } #) } } }) -}
08bf25ebfa60a42da937d59b8c45f305
  $wtests ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ Defs.Database
                   @ GHC.Types.Bool
                   Defs.$fShowDatabase
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Main.$fArbitraryDatabase2
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] (Defs.N:Database[0])))
                   Main.$fArbitraryDatabase1
                     `cast`
                   (<Defs.Database>_R ->_R ([Sym (Defs.N:Database[0])])_R)
                   Properties.parses_db
                   ww
                   ww1
                   ww2
                   ww3
                   w) -}
5eb5d2570bd0a9008a4504b48865c0f3
  $wtests1 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ Defs.Database
                   @ GHC.Types.Bool
                   Defs.$fShowDatabase
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Main.$fArbitraryDatabase2
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] (Defs.N:Database[0])))
                   Main.$fArbitraryDatabase1
                     `cast`
                   (<Defs.Database>_R ->_R ([Sym (Defs.N:Database[0])])_R)
                   Main.prop_install_g
                   ww
                   ww1
                   ww2
                   ww3
                   w) -}
bb98740716b240bf9c4a6172826cd53c
  $wtests2 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ Defs.Database
                   @ GHC.Types.Bool
                   Defs.$fShowDatabase
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Main.$fArbitraryDatabase2
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] (Defs.N:Database[0])))
                   Main.$fArbitraryDatabase1
                     `cast`
                   (<Defs.Database>_R ->_R ([Sym (Defs.N:Database[0])])_R)
                   Main.prop_install_f
                   ww
                   ww1
                   ww2
                   ww3
                   w) -}
5f718406271577acf0e673b7baa8e968
  $wtests3 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ Defs.Database
                   @ GHC.Types.Bool
                   Defs.$fShowDatabase
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Main.$fArbitraryDatabase2
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] (Defs.N:Database[0])))
                   Main.$fArbitraryDatabase1
                     `cast`
                   (<Defs.Database>_R ->_R ([Sym (Defs.N:Database[0])])_R)
                   Main.prop_install_e
                   ww
                   ww1
                   ww2
                   ww3
                   w) -}
85e44339dbdaaa55e20be5373eaf56fb
  $wtests4 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ Defs.Database
                   @ GHC.Types.Bool
                   Defs.$fShowDatabase
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Main.$fArbitraryDatabase2
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] (Defs.N:Database[0])))
                   Main.$fArbitraryDatabase1
                     `cast`
                   (<Defs.Database>_R ->_R ([Sym (Defs.N:Database[0])])_R)
                   Main.prop_install_d
                   ww
                   ww1
                   ww2
                   ww3
                   w) -}
d74d422f7771a0a78b9723bf3c937ee0
  $wtests5 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ Defs.Database
                   @ GHC.Types.Bool
                   Defs.$fShowDatabase
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Main.$fArbitraryDatabase2
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] (Defs.N:Database[0])))
                   Main.$fArbitraryDatabase1
                     `cast`
                   (<Defs.Database>_R ->_R ([Sym (Defs.N:Database[0])])_R)
                   Main.prop_install_c
                   ww
                   ww1
                   ww2
                   ww3
                   w) -}
7fde82dd87438a97be50a76e587894bd
  $wtests6 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ Defs.Database
                   @ GHC.Types.Bool
                   Defs.$fShowDatabase
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Main.$fArbitraryDatabase2
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] (Defs.N:Database[0])))
                   Main.$fArbitraryDatabase1
                     `cast`
                   (<Defs.Database>_R ->_R ([Sym (Defs.N:Database[0])])_R)
                   Main.prop_install_b
                   ww
                   ww1
                   ww2
                   ww3
                   w) -}
68b0b1f7279229763c6145cc2ac43c21
  $wtests7 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ Defs.Database
                   @ GHC.Types.Bool
                   Defs.$fShowDatabase
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Main.$fArbitraryDatabase2
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] (Defs.N:Database[0])))
                   Main.$fArbitraryDatabase1
                     `cast`
                   (<Defs.Database>_R ->_R ([Sym (Defs.N:Database[0])])_R)
                   Main.prop_install_a
                   ww
                   ww1
                   ww2
                   ww3
                   w) -}
4548c271ccd150a705cca0ea840b4234
  $wvalidPNames ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> [Defs.PName]
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.Int#) ->
                 Data.OldList.nubBy
                   @ Defs.PName
                   GHC.Base.eqString
                     `cast`
                   (Sym (Defs.N:PName[0])
                    ->_R Sym (Defs.N:PName[0])
                    ->_R <GHC.Types.Bool>_R)
                   (Test.QuickCheck.Gen.$wlistOf1
                      @ Defs.PName
                      Main.$fArbitraryDatabase29
                        `cast`
                      (Sym (Test.QuickCheck.Gen.N:Gen[0] (Defs.N:PName[0])))
                      ww
                      ww1
                      ww2
                      ww3
                      ww4)) -}
d26d659c685a6fce3526890d25480c5a
  alphanums :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Main.letters
                   Main.digits) -}
bc553da8edaf2e03357727d966b3e4aa
  digits :: [GHC.Types.Char]
  {- Unfolding: (GHC.Enum.eftChar 49# 57#) -}
c878616e048356b460048e225954e11b
  genAvailDeps ::
    Defs.Pkg -> [Defs.Pkg] -> Test.QuickCheck.Gen.Gen Defs.Constrs
  {- Arity: 4,
     Strictness: <L,1*U(1*U,A,A,A)><L,1*U><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U(U)>,
     Unfolding: InlineRule (0, True, True)
                Main.genAvailDeps1
                  `cast`
                (<Defs.Pkg>_R
                 ->_R <[Defs.Pkg]>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0] <Defs.Constrs>_R)) -}
edcbf89ed160e1f2f178f82b62ac968a
  genAvailDeps1 ::
    Defs.Pkg
    -> [Defs.Pkg]
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Defs.Constrs
  {- Arity: 4,
     Strictness: <L,1*U(1*U,A,A,A)><L,1*U><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U(U)>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Defs.Pkg)
                   (w1 :: [Defs.Pkg])
                   (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 case w2
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$wgenAvailDeps w w1 ww1 ww2 ww3 ww4 w3 }) -}
81d70b4af4b870667bce972b9a051b92
  genDeps :: [Defs.Pkg] -> Test.QuickCheck.Gen.Gen [Defs.Pkg]
  {- Arity: 3, Strictness: <S,U><L,1*U(U,U,U,1*U,A,A)><L,U(U)>,
     Unfolding: InlineRule (0, True, True)
                Main.$fArbitraryDatabase42
                  `cast`
                (<[Defs.Pkg]>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0] <[Defs.Pkg]>_R)) -}
650996bc13bf4f898aee40c0bfb080b4
  genRange ::
    (Test.QuickCheck.Arbitrary.Arbitrary b, GHC.Classes.Ord b) =>
    b -> Test.QuickCheck.Gen.Gen (b, b)
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A)><L,U(A,A,A,C(C1(U)),C(C1(U)),A,A,A)><L,U><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U(U)>m,
     Unfolding: InlineRule (0, True, True)
                Main.genRange1
                  `cast`
                (forall (b :: <*>_N).
                 <Test.QuickCheck.Arbitrary.Arbitrary b>_R
                 ->_R <GHC.Classes.Ord b>_R
                 ->_R <b>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0] <(b, b)>_R)) -}
3457f11032b0ea4cac6d1f1846d8388c
  genRange1 ::
    (Test.QuickCheck.Arbitrary.Arbitrary b, GHC.Classes.Ord b) =>
    b -> Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> (b, b)
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A)><L,U(A,A,A,C(C1(U)),C(C1(U)),A,A,A)><L,U><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ b
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (w1 :: GHC.Classes.Ord b)
                   (w2 :: b)
                   (w3 :: Test.QuickCheck.Random.QCGen)
                   (w4 :: GHC.Types.Int) ->
                 case w3
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case Main.$wgenRange
                        @ b
                        w
                        w1
                        w2
                        ww1
                        ww2
                        ww3
                        ww4
                        w4 of ww7 { (#,#) ww8 ww9 ->
                 (ww8, ww9) } }) -}
2d3a5635328ff566be4e5ccb7edd465e
  letters :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Main.lowers
                   Main.uppers) -}
511f4294164f6bf213c4c96784c527da
  lowers :: [GHC.Types.Char]
  {- Unfolding: (GHC.Enum.eftChar 97# 122#) -}
120aaa0bdde2f3d19fb2d8a684b5ef76
  main :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
8ada7068864ad43e1af4a6a9f257b7f4
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (Test.Tasty.CmdLine.defaultMainWithIngredients1
                   Test.Tasty.defaultIngredients
                   Main.tests) -}
d64676fdafbf3faee012ec5e97dfe1f7
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
31d9992bd6fa74337a4e6e27796829ff
  mergeMultiple :: Defs.Constrs -> GHC.Base.Maybe Defs.Constrs
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [(Defs.PName, Defs.PConstr)]) ->
                 case ds of wild {
                   [] -> Main.mergeMultiple1
                   : c cs
                   -> Main.mergeMultiple_go
                        cs
                        (GHC.Types.[] @ (Defs.PName, Defs.PConstr)) }) -}
4ab13ead6363f218442a2dbcb080d31b
  mergeMultiple1 :: GHC.Base.Maybe [(Defs.PName, Defs.PConstr)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ [(Defs.PName, Defs.PConstr)]
                   (GHC.Types.[] @ (Defs.PName, Defs.PConstr))) -}
3c9cea9a45ac128b81c499f7b5ce5f51
  mergeMultiple_go ::
    [(Defs.PName, Defs.PConstr)]
    -> Defs.Constrs -> GHC.Base.Maybe Defs.Constrs
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U> -}
7994095b20a16f531ca2dce6b4cef3a5
  prop_install_a :: Defs.Database -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (ds :: Defs.Database) ->
                 let {
                   p :: Defs.PName
                   = case ds `cast` (Defs.N:Database[0]) of wild {
                       [] -> case GHC.List.badHead ret_ty Defs.PName of {}
                       : x ds1 -> case x of wild1 { Defs.Pkg ds4 ds5 ds6 ds7 -> ds4 } }
                 } in
                 case Data.OldList.sortBy
                        @ Defs.Pkg
                        SolverImpl.getPkgs1
                        (GHC.List.filter
                           @ Defs.Pkg
                           (\ (x :: Defs.Pkg) ->
                            case x of wild { Defs.Pkg ds4 ds5 ds6 ds7 ->
                            GHC.Base.eqString
                              p `cast` (Defs.N:PName[0])
                              ds4 `cast` (Defs.N:PName[0]) })
                           ds `cast` (Defs.N:Database[0])) of wild {
                   [] -> GHC.Types.True
                   : ipv ipv1
                   -> case SolverImpl.getSols ds wild of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just x1
                        -> case x1 of wild2 {
                             [] -> case GHC.List.badHead ret_ty GHC.Types.Bool of {}
                             : x ds1
                             -> letrec {
                                  go :: [(Defs.PName, Defs.Version)] -> GHC.Types.Bool
                                    <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                                  = \ (ds3 :: [(Defs.PName, Defs.Version)]) ->
                                    case ds3 of wild3 {
                                      [] -> GHC.Types.True
                                      : y ys
                                      -> case y of ww { (,) ww1 ww2 ->
                                         case Properties.$wisInDB ww1 ww2 ds of wild4 {
                                           GHC.Types.False -> GHC.Types.False
                                           GHC.Types.True -> go ys } } }
                                } in
                                go x } } }) -}
a6a5a444d126ed6357cfe22c7346413a
  prop_install_b :: Defs.Database -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (ds :: Defs.Database) ->
                 let {
                   p :: Defs.PName
                   = case ds `cast` (Defs.N:Database[0]) of wild {
                       [] -> case GHC.List.badHead ret_ty Defs.PName of {}
                       : x ds1 -> case x of wild1 { Defs.Pkg ds4 ds5 ds6 ds7 -> ds4 } }
                 } in
                 case Data.OldList.sortBy
                        @ Defs.Pkg
                        SolverImpl.getPkgs1
                        (GHC.List.filter
                           @ Defs.Pkg
                           (\ (x :: Defs.Pkg) ->
                            case x of wild { Defs.Pkg ds4 ds5 ds6 ds7 ->
                            GHC.Base.eqString
                              p `cast` (Defs.N:PName[0])
                              ds4 `cast` (Defs.N:PName[0]) })
                           ds `cast` (Defs.N:Database[0])) of wild {
                   [] -> GHC.Types.True
                   : ipv ipv1
                   -> case SolverImpl.getSols ds wild of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just x1
                        -> case x1 of wild2 {
                             [] -> case GHC.List.badHead ret_ty GHC.Types.Bool of {}
                             : x ds1
                             -> Properties.install_b_go (Properties.groupByName x) } } }) -}
4e17e43dd8ac1ea19dfbf08cf4ae2431
  prop_install_c :: Defs.Database -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (ds :: Defs.Database) ->
                 let {
                   p :: Defs.PName
                   = case ds `cast` (Defs.N:Database[0]) of wild {
                       [] -> case GHC.List.badHead ret_ty Defs.PName of {}
                       : x ds1 -> case x of wild1 { Defs.Pkg ds4 ds5 ds6 ds7 -> ds4 } }
                 } in
                 case Data.OldList.sortBy
                        @ Defs.Pkg
                        SolverImpl.getPkgs1
                        (GHC.List.filter
                           @ Defs.Pkg
                           (\ (x :: Defs.Pkg) ->
                            case x of wild { Defs.Pkg ds4 ds5 ds6 ds7 ->
                            GHC.Base.eqString
                              p `cast` (Defs.N:PName[0])
                              ds4 `cast` (Defs.N:PName[0]) })
                           ds `cast` (Defs.N:Database[0])) of wild {
                   [] -> GHC.Types.True
                   : ipv ipv1
                   -> case SolverImpl.getSols ds wild of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just x1
                        -> case x1 of wild2 {
                             [] -> case GHC.List.badHead ret_ty GHC.Types.Bool of {}
                             : x ds1
                             -> letrec {
                                  go :: [(Defs.PName, Defs.Version)] -> GHC.Types.Bool
                                    <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                                  = \ (ds2 :: [(Defs.PName, Defs.Version)]) ->
                                    case ds2 of wild3 {
                                      [] -> GHC.Types.False
                                      : y ys
                                      -> case y of wild4 { (,) p1 ds3 ->
                                         case GHC.Base.eqString
                                                p `cast` (Defs.N:PName[0])
                                                p1 `cast` (Defs.N:PName[0]) of wild5 {
                                           GHC.Types.False -> go ys
                                           GHC.Types.True -> GHC.Types.True } } }
                                } in
                                go x } } }) -}
3b5e6fa7f5809ad9c229291a33125d2c
  prop_install_d :: Defs.Database -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (ds :: Defs.Database) ->
                 let {
                   p :: Defs.PName
                   = case ds `cast` (Defs.N:Database[0]) of wild {
                       [] -> case GHC.List.badHead ret_ty Defs.PName of {}
                       : x ds1 -> case x of wild1 { Defs.Pkg ds4 ds5 ds6 ds7 -> ds4 } }
                 } in
                 case Data.OldList.sortBy
                        @ Defs.Pkg
                        SolverImpl.getPkgs1
                        (GHC.List.filter
                           @ Defs.Pkg
                           (\ (x :: Defs.Pkg) ->
                            case x of wild { Defs.Pkg ds4 ds5 ds6 ds7 ->
                            GHC.Base.eqString
                              p `cast` (Defs.N:PName[0])
                              ds4 `cast` (Defs.N:PName[0]) })
                           ds `cast` (Defs.N:Database[0])) of wild {
                   [] -> Properties.$winstall_d ds (GHC.Base.Nothing @ Defs.Sol)
                   : ipv ipv1
                   -> case SolverImpl.getSols ds wild of wild1 {
                        GHC.Base.Nothing
                        -> Properties.$winstall_d ds (GHC.Base.Nothing @ Defs.Sol)
                        GHC.Base.Just x1
                        -> Properties.$winstall_d
                             ds
                             (GHC.Base.Just @ Defs.Sol (GHC.List.head @ Defs.Sol x1)) } }) -}
736a61b8ecb205a729327cb45ceadcaa
  prop_install_e :: Defs.Database -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (ds :: Defs.Database) ->
                 let {
                   p :: Defs.PName
                   = case ds `cast` (Defs.N:Database[0]) of wild {
                       [] -> case GHC.List.badHead ret_ty Defs.PName of {}
                       : x ds1 -> case x of wild1 { Defs.Pkg ds4 ds5 ds6 ds7 -> ds4 } }
                 } in
                 case Data.OldList.sortBy
                        @ Defs.Pkg
                        SolverImpl.getPkgs1
                        (GHC.List.filter
                           @ Defs.Pkg
                           (\ (x :: Defs.Pkg) ->
                            case x of wild { Defs.Pkg ds4 ds5 ds6 ds7 ->
                            GHC.Base.eqString
                              p `cast` (Defs.N:PName[0])
                              ds4 `cast` (Defs.N:PName[0]) })
                           ds `cast` (Defs.N:Database[0])) of wild {
                   []
                   -> Properties.$winstall_e
                        @ Defs.PName
                        ds
                        (GHC.Base.Nothing @ Defs.Sol)
                   : ipv ipv1
                   -> case SolverImpl.getSols ds wild of wild1 {
                        GHC.Base.Nothing
                        -> Properties.$winstall_e
                             @ Defs.PName
                             ds
                             (GHC.Base.Nothing @ Defs.Sol)
                        GHC.Base.Just x1
                        -> Properties.$winstall_e
                             @ Defs.PName
                             ds
                             (GHC.Base.Just @ Defs.Sol (GHC.List.head @ Defs.Sol x1)) } }) -}
febba7526f8e599833db9f85f967e926
  prop_install_f :: Defs.Database -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (ds :: Defs.Database) ->
                 let {
                   p :: Defs.PName
                   = case ds `cast` (Defs.N:Database[0]) of wild {
                       [] -> case GHC.List.badHead ret_ty Defs.PName of {}
                       : x ds1 -> case x of wild1 { Defs.Pkg ds4 ds5 ds6 ds7 -> ds4 } }
                 } in
                 case Data.OldList.sortBy
                        @ Defs.Pkg
                        SolverImpl.getPkgs1
                        (GHC.List.filter
                           @ Defs.Pkg
                           (\ (x :: Defs.Pkg) ->
                            case x of wild { Defs.Pkg ds4 ds5 ds6 ds7 ->
                            GHC.Base.eqString
                              p `cast` (Defs.N:PName[0])
                              ds4 `cast` (Defs.N:PName[0]) })
                           ds `cast` (Defs.N:Database[0])) of wild {
                   [] -> Properties.install_f ds p (GHC.Base.Nothing @ Defs.Sol)
                   : ipv ipv1
                   -> case SolverImpl.getSols ds wild of wild1 {
                        GHC.Base.Nothing
                        -> Properties.install_f ds p (GHC.Base.Nothing @ Defs.Sol)
                        GHC.Base.Just x1
                        -> Properties.install_f
                             ds
                             p
                             (GHC.Base.Just @ Defs.Sol (GHC.List.head @ Defs.Sol x1)) } }) -}
2ca031d69584b23a31f67d15c591d9be
  prop_install_g :: Defs.Database -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (ds :: Defs.Database) ->
                 let {
                   p :: Defs.PName
                   = case ds `cast` (Defs.N:Database[0]) of wild {
                       [] -> case GHC.List.badHead ret_ty Defs.PName of {}
                       : x ds1 -> case x of wild1 { Defs.Pkg ds4 ds5 ds6 ds7 -> ds4 } }
                 } in
                 case Data.OldList.sortBy
                        @ Defs.Pkg
                        SolverImpl.getPkgs1
                        (GHC.List.filter
                           @ Defs.Pkg
                           (\ (x :: Defs.Pkg) ->
                            case x of wild { Defs.Pkg ds4 ds5 ds6 ds7 ->
                            GHC.Base.eqString
                              p `cast` (Defs.N:PName[0])
                              ds4 `cast` (Defs.N:PName[0]) })
                           ds `cast` (Defs.N:Database[0])) of wild {
                   []
                   -> Properties.$winstall_g
                        @ Defs.PName
                        ds
                        (GHC.Base.Nothing @ Defs.Sol)
                   : ipv ipv1
                   -> case SolverImpl.getSols ds wild of wild1 {
                        GHC.Base.Nothing
                        -> Properties.$winstall_g
                             @ Defs.PName
                             ds
                             (GHC.Base.Nothing @ Defs.Sol)
                        GHC.Base.Just x1
                        -> Properties.$winstall_g
                             @ Defs.PName
                             ds
                             (GHC.Base.Just @ Defs.Sol (GHC.List.head @ Defs.Sol x1)) } }) -}
df72b3588814286dfa0cf7cc8c7f5e8b
  prop_parse_db :: Defs.Database -> GHC.Types.Bool
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True) Properties.parses_db -}
0341c1922bef591ed248e3195d8459d7
  simple :: Test.QuickCheck.Gen.Gen [GHC.Types.Char]
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>m2,
     Unfolding: InlineRule (0, True, True)
                Main.$fArbitraryDatabase29
                  `cast`
                (Sym (Test.QuickCheck.Gen.N:Gen[0] <[GHC.Types.Char]>_R)) -}
8451fdfd70d706d0c9b42466d27d547d
  tests :: Test.Tasty.Core.TestTree
  {- Strictness: m2,
     Unfolding: (Test.Tasty.Core.TestGroup Main.tests41 Main.tests1) -}
20dd6f67f8c2c78999113581146d1aae
  tests1 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.tests37
                   Main.tests2) -}
759703772ef7ed880b6f0e563eeef46c
  tests10 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$wtests ww1 ww2 ww3 ww4 w1 }) -}
e1f3339c4c35e4c0119949e20c7c55ac
  tests11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests12) -}
250a288c9ea6b8c481cfcc421a39ee33
  tests12 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("parsing"#) -}
9f56c12c30f7d6bdb5d9bf247a286037
  tests13 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.QuickCheck.QC
                   Test.Tasty.QuickCheck.$fIsTestQC
                   Main.tests15
                   Main.tests14
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             (Test.QuickCheck.Property.N:Prop[0])) ; (Sym (Test.QuickCheck.Property.N:Property[0]) ; Sym (Test.Tasty.QuickCheck.N:QC[0])))) -}
ceaf4542722d6d300efb69e18a983d46
  tests14 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$wtests1 ww1 ww2 ww3 ww4 w1 }) -}
8edc92ffccfa2a8cf3c6f92ac58e2516
  tests15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests16) -}
1faad2d92f8c13707ab3f69090d6c235
  tests16 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("prop g"#) -}
4790332800a4f1edf2d1db5fb0746475
  tests17 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.QuickCheck.QC
                   Test.Tasty.QuickCheck.$fIsTestQC
                   Main.tests19
                   Main.tests18
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             (Test.QuickCheck.Property.N:Prop[0])) ; (Sym (Test.QuickCheck.Property.N:Property[0]) ; Sym (Test.Tasty.QuickCheck.N:QC[0])))) -}
f7fb1b56828c4ce376feefe4b1de29a9
  tests18 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$wtests2 ww1 ww2 ww3 ww4 w1 }) -}
3c5be77efac9d14ba883b378fa3d72d0
  tests19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests20) -}
3eed0b184668d22383af351c17ebb1af
  tests2 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.tests33
                   Main.tests3) -}
3f43078ecfd3afc4c34ebc7a3291884d
  tests20 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("prop f"#) -}
308c022be75d277f68901dddacd53834
  tests21 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.QuickCheck.QC
                   Test.Tasty.QuickCheck.$fIsTestQC
                   Main.tests23
                   Main.tests22
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             (Test.QuickCheck.Property.N:Prop[0])) ; (Sym (Test.QuickCheck.Property.N:Property[0]) ; Sym (Test.Tasty.QuickCheck.N:QC[0])))) -}
5cceb95ad84429a11259ad03b401e5f6
  tests22 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$wtests3 ww1 ww2 ww3 ww4 w1 }) -}
ab8a8402ca9900d08e5b31687c9b762e
  tests23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests24) -}
05ca0c652d8f4a8f126b8a72b8f4cafb
  tests24 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("prop e"#) -}
e61b1335dbcad159ff5c7b7aaaec0107
  tests25 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.QuickCheck.QC
                   Test.Tasty.QuickCheck.$fIsTestQC
                   Main.tests27
                   Main.tests26
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             (Test.QuickCheck.Property.N:Prop[0])) ; (Sym (Test.QuickCheck.Property.N:Property[0]) ; Sym (Test.Tasty.QuickCheck.N:QC[0])))) -}
d013910a812035ffb9515e9bfdb00c5c
  tests26 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$wtests4 ww1 ww2 ww3 ww4 w1 }) -}
21e8c073ec7e11989af3afc8529ee9fd
  tests27 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests28) -}
878919ee85ae9aa2a269848597258b2a
  tests28 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("prop d"#) -}
0667f1f6d40ed8f45d6522f52dc20d88
  tests29 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.QuickCheck.QC
                   Test.Tasty.QuickCheck.$fIsTestQC
                   Main.tests31
                   Main.tests30
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             (Test.QuickCheck.Property.N:Prop[0])) ; (Sym (Test.QuickCheck.Property.N:Property[0]) ; Sym (Test.Tasty.QuickCheck.N:QC[0])))) -}
c6aebe02cf3a644bb5ad4720b7350a9f
  tests3 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.tests29
                   Main.tests4) -}
a56004141272662ea762b3b840a19cc6
  tests30 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$wtests5 ww1 ww2 ww3 ww4 w1 }) -}
e3628b8ab02b740b283c1489ccb48fe0
  tests31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests32) -}
e76686a9fadfc44e003eeb6155c06fa0
  tests32 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("prop c"#) -}
45de91d7f411b687bb10a062e51de497
  tests33 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.QuickCheck.QC
                   Test.Tasty.QuickCheck.$fIsTestQC
                   Main.tests35
                   Main.tests34
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             (Test.QuickCheck.Property.N:Prop[0])) ; (Sym (Test.QuickCheck.Property.N:Property[0]) ; Sym (Test.Tasty.QuickCheck.N:QC[0])))) -}
ca5e7b3b453a4d99acd8207b21bd5571
  tests34 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$wtests6 ww1 ww2 ww3 ww4 w1 }) -}
b95f75c62446711d79cbdfef0b5a7d72
  tests35 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests36) -}
57cddcacc48938aa8bf546f30924e1f5
  tests36 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("prop b"#) -}
d6137baf086d884d86e122d9c266eeec
  tests37 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.QuickCheck.QC
                   Test.Tasty.QuickCheck.$fIsTestQC
                   Main.tests39
                   Main.tests38
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             (Test.QuickCheck.Property.N:Prop[0])) ; (Sym (Test.QuickCheck.Property.N:Property[0]) ; Sym (Test.Tasty.QuickCheck.N:QC[0])))) -}
f8f273413a8192b8817b767bb30d5f36
  tests38 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$wtests7 ww1 ww2 ww3 ww4 w1 }) -}
0f0f3e1f4c0826320ff0a648e1e6c00a
  tests39 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests40) -}
97b691fa6d2b29bbbd1a3038f513aa22
  tests4 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.tests25
                   Main.tests5) -}
1fa844c3123a580a6d8e00b40d4f499a
  tests40 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("prop a"#) -}
cd3310051484b8b70799ad48b571de52
  tests41 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests42) -}
488eb2fdc5c546b9bb1441a45b6e95cc
  tests42 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("QC tests"#) -}
7135cac1a246164fad49621b67ae31d4
  tests5 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.tests21
                   Main.tests6) -}
ac9537862dc9dad3f380257760933314
  tests6 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.tests17
                   Main.tests7) -}
7612639bbd6b5d559b83b86f5da7ff99
  tests7 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.tests13
                   Main.tests8) -}
12cd60b544296e5c53e32faebc7a2d3d
  tests8 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.tests9
                   (GHC.Types.[] @ Test.Tasty.Core.TestTree)) -}
1ec5921b4ad5cfec6c37f43cd694f01a
  tests9 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.QuickCheck.QC
                   Test.Tasty.QuickCheck.$fIsTestQC
                   Main.tests11
                   Main.tests10
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             (Test.QuickCheck.Property.N:Prop[0])) ; (Sym (Test.QuickCheck.Property.N:Property[0]) ; Sym (Test.Tasty.QuickCheck.N:QC[0])))) -}
6923f41ed77800bbb5a98af0f26db6a0
  trim :: [Defs.Pkg] -> Test.QuickCheck.Gen.Gen [Defs.Pkg]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
946ed9da362471af1be60c0f7c9d6c95
  uppers :: [GHC.Types.Char]
  {- Unfolding: (GHC.Enum.eftChar 65# 90#) -}
5cc4cf24d142391baf5152606affb80c
  validPNames :: Test.QuickCheck.Gen.Gen [Defs.PName]
  {- Arity: 2,
     Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                Main.validPNames1
                  `cast`
                (Sym (Test.QuickCheck.Gen.N:Gen[0] <[Defs.PName]>_R)) -}
2d8ed54632a332d5278fd5770aa73cb9
  validPNames1 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> [Defs.PName]
  {- Arity: 2,
     Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w1 of ww7 { GHC.Types.I# ww8 ->
                 Main.$wvalidPNames ww1 ww2 ww3 ww4 ww8 } }) -}
instance [orphan] Test.QuickCheck.Arbitrary.Arbitrary [Defs.Database]
  = Main.$fArbitraryDatabase
instance [orphan] Test.QuickCheck.Arbitrary.Arbitrary [Defs.PName]
  = Main.$fArbitraryPName
instance [orphan] Test.QuickCheck.Arbitrary.Arbitrary [Defs.Pkg]
  = Main.$fArbitraryPkg
instance [orphan] Test.QuickCheck.Arbitrary.Arbitrary [Defs.VNum]
  = Main.$fArbitraryVNum
instance [orphan] Test.QuickCheck.Arbitrary.Arbitrary [Defs.Version]
  = Main.$fArbitraryVersion
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

