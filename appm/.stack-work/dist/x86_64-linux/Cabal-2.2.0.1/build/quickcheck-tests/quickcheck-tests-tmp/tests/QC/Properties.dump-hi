
==================== FINAL INTERFACE ====================
2018-11-05 01:23:56.485813606 UTC

interface main:Properties 8043
  interface hash: d61aa4075fec656b4cdc164574b9e156
  ABI hash: 6cc822f359d8aacafe084c348143cd58
  export-list hash: 31e63cccc97f80b9f633ef98d485b633
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 4a197e670d605e4f8ceeb5c4aaae358a
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Properties.dbEquiv
  Properties.genConstrs
  Properties.getNewerVers
  Properties.getReqs
  Properties.groupByName
  Properties.install_a
  Properties.install_b
  Properties.install_c
  Properties.install_d
  Properties.install_e
  Properties.install_f
  Properties.install_g
  Properties.isInDB
  Properties.isReqInSol
  Properties.parses_db
  Properties.sat
  Properties.InstallProp
module dependencies:
package dependencies: appm-0.0.0 array-0.5.2.0 base-4.11.1.0*
                      binary-0.8.5.1 bytestring-0.10.8.2 containers-0.5.11.0
                      deepseq-1.4.3.0 ghc-prim-0.5.2.0 integer-gmp-1.0.2.0 mtl-2.2.2
                      parsec-3.1.13.0 text-1.2.3.0 transformers-0.5.5.0
orphans: text-1.2.3.0:Data.Text.Lazy text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
import  -/  appm-0.0.0:Defs 33704ed0d96c186bd2b1ffcf2d3c5e21
import  -/  appm-0.0.0:Parser c0cd3821ee7fbd8174e6013070c81905
import  -/  appm-0.0.0:ParserImpl d159ed4a8f7f6d29f10223fbf36c17cc
import  -/  appm-0.0.0:Utils 56e11831633c003055841737133cc50e
import  -/  base-4.11.1.0:Control.Monad c5f960c67d822497578bffbd3e4c01cf
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:Data.Traversable 7ad4edb9184ea1ae8e73f6b94f115c8c
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
23f548d8a1a8a3b641b4b01ca7aff91c
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Properties.$trModule3
                   Properties.$trModule1) -}
94ab8ab05e7d1d69e746f8b88e53c1f5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Properties.$trModule2) -}
68189f52d26313406c23546685959720
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Properties"#) -}
f74bedf00513bc08a55d755e65614825
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Properties.$trModule4) -}
026c81296e1caea95bdf421041a68f0c
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
705e93c4893f40ba32b2377c6fce42e8
  $winstall_b :: GHC.Base.Maybe Defs.Sol -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Base.Maybe Defs.Sol) ->
                 case w of wild {
                   GHC.Base.Nothing -> GHC.Types.True
                   GHC.Base.Just sol
                   -> Properties.install_b_go (Properties.groupByName sol) }) -}
1c18d13020fb0f38cf7402ff95c7b07c
  $winstall_c ::
    Defs.PName -> GHC.Base.Maybe Defs.Sol -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0],
     Unfolding: (\ (w :: Defs.PName) (w1 :: GHC.Base.Maybe Defs.Sol) ->
                 case w1 of wild {
                   GHC.Base.Nothing -> GHC.Types.True
                   GHC.Base.Just sol
                   -> letrec {
                        go :: [(Defs.PName, Defs.Version)] -> GHC.Types.Bool
                          <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (ds :: [(Defs.PName, Defs.Version)]) ->
                          case ds of wild1 {
                            [] -> GHC.Types.False
                            : y ys
                            -> case y of wild2 { (,) p ds1 ->
                               case GHC.Base.eqString
                                      w `cast` (Defs.N:PName[0])
                                      p `cast` (Defs.N:PName[0]) of wild3 {
                                 GHC.Types.False -> go ys GHC.Types.True -> GHC.Types.True } } }
                      } in
                      go sol }) -}
92c11fba122e557ddabd1a8595487f28
  $winstall_d ::
    Defs.Database -> GHC.Base.Maybe Defs.Sol -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0],
     Unfolding: (\ (w :: Defs.Database)
                   (w1 :: GHC.Base.Maybe Defs.Sol) ->
                 case w1 of wild {
                   GHC.Base.Nothing -> GHC.Types.True
                   GHC.Base.Just sol
                   -> letrec {
                        go :: [(Defs.PName, Defs.Version)] -> GHC.Types.Bool
                          <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (ds :: [(Defs.PName, Defs.Version)]) ->
                          case ds of wild1 {
                            [] -> GHC.Types.True
                            : y ys
                            -> case Properties.getReqs y w of wild2 {
                                 GHC.Base.Nothing -> GHC.Types.False
                                 GHC.Base.Just reqs
                                 -> let {
                                      exit :: GHC.Types.Bool <join 0> = go ys
                                    } in
                                    letrec {
                                      go1 :: [(Defs.PName, Defs.PConstr)] -> GHC.Types.Bool
                                        <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                                      = \ (ds1 :: [(Defs.PName, Defs.PConstr)]) ->
                                        case ds1 of wild3 {
                                          [] -> exit
                                          : y1 ys1
                                          -> case y1 of ww { (,) ww1 ww2 ->
                                             case ww2 of ww3 { (,,) ww4 ww5 ww6 ->
                                             case Properties.$wisReqInSol
                                                    ww1
                                                    ww4
                                                    ww5
                                                    ww6
                                                    sol of wild4 {
                                               GHC.Types.False -> GHC.Types.False
                                               GHC.Types.True -> go1 ys1 } } } }
                                    } in
                                    go1 reqs } }
                      } in
                      go sol }) -}
d9b2a9f1d4a52964c018430db2aecdf8
  $winstall_e ::
    Defs.Database
    -> GHC.Base.Maybe [(Defs.PName, Defs.Version)] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0],
     Unfolding: (\ @ p
                   (w :: Defs.Database)
                   (w1 :: GHC.Base.Maybe [(Defs.PName, Defs.Version)]) ->
                 case w1 of wild {
                   GHC.Base.Nothing -> GHC.Types.True
                   GHC.Base.Just sol
                   -> letrec {
                        go :: [(Defs.PName, Defs.Version)] -> GHC.Types.Bool
                          <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (ds :: [(Defs.PName, Defs.Version)]) ->
                          case ds of wild1 {
                            [] -> GHC.Types.True
                            : y ys
                            -> case Properties.getReqs y w of wild2 {
                                 GHC.Base.Nothing -> GHC.Types.False
                                 GHC.Base.Just cs
                                 -> let {
                                      sol1 :: Defs.Sol
                                      = Data.OldList.deleteBy
                                          @ (Defs.PName, Defs.Version)
                                          Properties.install_e1
                                          y
                                          sol
                                    } in
                                    let {
                                      x :: GHC.Types.Bool <join 0> = go ys
                                    } in
                                    letrec {
                                      go1 :: [(Defs.PName, Defs.PConstr)] -> GHC.Types.Bool
                                        <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                                      = \ (ds1 :: [(Defs.PName, Defs.PConstr)]) ->
                                        case ds1 of wild3 {
                                          [] -> x
                                          : y1 ys1
                                          -> case y1 of ww { (,) ww1 ww2 ->
                                             case ww2 of ww3 { (,,) ww4 ww5 ww6 ->
                                             case Utils.$wsatisfies' sol1 ww1 ww4 ww5 ww6 of wild4 {
                                               GHC.Types.False -> GHC.Types.False
                                               GHC.Types.True -> go1 ys1 } } } }
                                    } in
                                    go1 cs } }
                      } in
                      go sol }) -}
2619f9ba37a51019bae05f918ce4a4db
  $winstall_g ::
    Defs.Database
    -> GHC.Base.Maybe [(Defs.PName, Defs.Version)] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0],
     Unfolding: (\ @ p
                   (w :: Defs.Database)
                   (w1 :: GHC.Base.Maybe [(Defs.PName, Defs.Version)]) ->
                 case w1 of wild {
                   GHC.Base.Nothing -> GHC.Types.True
                   GHC.Base.Just sol
                   -> letrec {
                        go :: [(Defs.PName, Defs.Version)] -> GHC.Types.Bool
                          <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (ds :: [(Defs.PName, Defs.Version)]) ->
                          case ds of wild1 {
                            [] -> GHC.Types.True
                            : y ys
                            -> case Properties.getNewerVers y w of wild2 {
                                 [] -> go ys
                                 : ipv ipv1
                                 -> let {
                                      sol' :: [(Defs.PName, Defs.Version)]
                                      = Data.OldList.deleteBy
                                          @ (Defs.PName, Defs.Version)
                                          Properties.install_e1
                                          y
                                          sol
                                    } in
                                    let {
                                      exit :: GHC.Types.Bool <join 0> = go ys
                                    } in
                                    letrec {
                                      go1 :: [(Defs.PName, Defs.Version)] -> GHC.Types.Bool
                                        <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                                      = \ (ds1 :: [(Defs.PName, Defs.Version)]) ->
                                        case ds1 of wild3 {
                                          [] -> exit
                                          : y1 ys1
                                          -> let {
                                               sol'' :: [(Defs.PName, Defs.Version)]
                                               = GHC.Types.: @ (Defs.PName, Defs.Version) y1 sol'
                                             } in
                                             let {
                                               x :: GHC.Types.Bool <join 0> = go1 ys1
                                             } in
                                             case Properties.genConstrs w sol'' of wild4 {
                                               GHC.Base.Nothing -> x
                                               GHC.Base.Just cs
                                               -> letrec {
                                                    go2 :: [(Defs.PName, Defs.PConstr)]
                                                           -> GHC.Types.Bool
                                                      <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                                                    = \ (ds2 :: [(Defs.PName, Defs.PConstr)]) ->
                                                      case ds2 of wild5 {
                                                        [] -> GHC.Types.False
                                                        : y2 ys2
                                                        -> case y2 of ww { (,) ww1 ww2 ->
                                                           case ww2 of ww3 { (,,) ww4 ww5 ww6 ->
                                                           case Utils.$wsatisfies'
                                                                  sol''
                                                                  ww1
                                                                  ww4
                                                                  ww5
                                                                  ww6 of wild6 {
                                                             GHC.Types.False -> x
                                                             GHC.Types.True -> go2 ys2 } } } }
                                                  } in
                                                  go2 cs } }
                                    } in
                                    go1 wild2 } }
                      } in
                      go sol }) -}
14472a96e89601f631c36e66197f5691
  $wisInDB ::
    Defs.PName -> Defs.Version -> Defs.Database -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: Defs.PName)
                   (ww1 :: Defs.Version)
                   (w :: Defs.Database) ->
                 letrec {
                   go :: [Defs.Pkg] -> GHC.Types.Bool
                     <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [Defs.Pkg]) ->
                     case ds of wild {
                       [] -> GHC.Types.False
                       : y ys
                       -> case y of wild1 { Defs.Pkg ds4 ds5 ds6 ds7 ->
                          case GHC.Base.eqString
                                 ds4 `cast` (Defs.N:PName[0])
                                 ww `cast` (Defs.N:PName[0]) of wild2 {
                            GHC.Types.False -> go ys
                            GHC.Types.True
                            -> case GHC.Classes.$fEq[]_$c==
                                      @ Defs.VNum
                                      Defs.$fEqVNum
                                      ds5 `cast` (Defs.N:Version[0])
                                      ww1 `cast` (Defs.N:Version[0]) of wild3 {
                                 GHC.Types.False -> go ys GHC.Types.True -> GHC.Types.True } } } }
                 } in
                 go w `cast` (Defs.N:Database[0])) -}
8a9612247fec483f4ca5cb57e0c2408f
  $wisReqInSol ::
    Defs.PName
    -> GHC.Types.Bool
    -> Defs.Version
    -> Defs.Version
    -> Defs.Sol
    -> GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U><S,1*U><L,U><L,U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Defs.PName)
                   (ww1 :: GHC.Types.Bool)
                   (ww2 :: Defs.Version)
                   (ww3 :: Defs.Version)
                   (w :: Defs.Sol) ->
                 case ww1 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> letrec {
                        go :: [(Defs.PName, Defs.Version)] -> GHC.Types.Bool
                          <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (ds :: [(Defs.PName, Defs.Version)]) ->
                          case ds of wild1 {
                            [] -> GHC.Types.False
                            : y ys
                            -> case y of wild2 { (,) p' v ->
                               case GHC.Base.eqString
                                      p' `cast` (Defs.N:PName[0])
                                      ww `cast` (Defs.N:PName[0]) of wild3 {
                                 GHC.Types.False -> go ys
                                 GHC.Types.True
                                 -> case GHC.Classes.$fOrd[]_$ccompare
                                           @ Defs.VNum
                                           Defs.$fOrdVNum
                                           v `cast` (Defs.N:Version[0])
                                           ww2 `cast` (Defs.N:Version[0]) of wild4 {
                                      DEFAULT
                                      -> case GHC.Classes.$fOrd[]_$ccompare
                                                @ Defs.VNum
                                                Defs.$fOrdVNum
                                                v `cast` (Defs.N:Version[0])
                                                ww3 `cast` (Defs.N:Version[0]) of wild5 {
                                           DEFAULT -> go ys GHC.Types.LT -> GHC.Types.True }
                                      GHC.Types.LT -> go ys } } } }
                      } in
                      go w }) -}
bf6fd17078141b57f51ebbbd7a1cc5fc
  $wlvl ::
    Defs.PName
    -> Defs.Version -> Defs.PName -> Defs.Version -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Defs.PName)
                   (ww1 :: Defs.Version)
                   (ww2 :: Defs.PName)
                   (ww3 :: Defs.Version) ->
                 case GHC.Base.eqString
                        ww `cast` (Defs.N:PName[0])
                        ww2 `cast` (Defs.N:PName[0]) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> GHC.Classes.$fEq[]_$c==
                        @ Defs.VNum
                        Defs.$fEqVNum
                        ww1 `cast` (Defs.N:Version[0])
                        ww3 `cast` (Defs.N:Version[0]) }) -}
100c05614a3d2f5abd222e1d393ce6db
  type InstallProp =
    Defs.Database
    -> Defs.PName -> GHC.Base.Maybe Defs.Sol -> GHC.Types.Bool
b58e9813874e8bf0950c71cf8d31aa24
  dbEquiv :: Defs.Database -> Defs.Database -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: (\ (ds :: Defs.Database) (ds1 :: Defs.Database) ->
                 case GHC.List.$wlenAcc
                        @ Defs.Pkg
                        ds `cast` (Defs.N:Database[0])
                        0# of ww2 { DEFAULT ->
                 case GHC.List.$wlenAcc
                        @ Defs.Pkg
                        ds1 `cast` (Defs.N:Database[0])
                        0# of ww1 { DEFAULT ->
                 case GHC.Prim.==# ww2 ww1 of lwild {
                   DEFAULT -> GHC.Types.False
                   1#
                   -> Properties.dbEquiv_go2
                        (Data.OldList.sortBy
                           @ Defs.Pkg
                           Defs.$fOrdPkg_$ccompare
                           ds `cast` (Defs.N:Database[0]))
                        (Data.OldList.sortBy
                           @ Defs.Pkg
                           Defs.$fOrdPkg_$ccompare
                           ds1 `cast` (Defs.N:Database[0])) } } }) -}
ef16f30f23df9a7d7548f7a7280eb99c
  dbEquiv_go2 :: [Defs.Pkg] -> [Defs.Pkg] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
272ff1a1cf57f6df3dd35b7881ac329e
  genConstrs ::
    Defs.Database -> Defs.Sol -> GHC.Base.Maybe Defs.Constrs
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: (\ (db :: Defs.Database) (sol :: Defs.Sol) ->
                 letrec {
                   go :: [(Defs.PName, Defs.Version)] -> GHC.Base.Maybe [Defs.Constrs]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [(Defs.PName, Defs.Version)]) ->
                     case ds of wild {
                       [] -> Properties.genConstrs1
                       : y ys
                       -> case Properties.getReqs y db of wild1 {
                            GHC.Base.Nothing -> GHC.Base.Nothing @ [Defs.Constrs]
                            GHC.Base.Just x
                            -> case go ys of wild2 {
                                 GHC.Base.Nothing -> GHC.Base.Nothing @ [Defs.Constrs]
                                 GHC.Base.Just y1
                                 -> GHC.Base.Just
                                      @ [Defs.Constrs]
                                      (GHC.Types.: @ Defs.Constrs x y1) } } }
                 } in
                 case go sol of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ Defs.Constrs
                   GHC.Base.Just x
                   -> Properties.genConstrs_go
                        x
                        (GHC.Types.[] @ (Defs.PName, Defs.PConstr)) }) -}
8d3b18320fb8b89712640f8dd1307961
  genConstrs1 :: GHC.Base.Maybe [Defs.Constrs]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ [Defs.Constrs]
                   (GHC.Types.[] @ Defs.Constrs)) -}
4bcbb29a44a83c6d2a1911a0c6f2949b
  genConstrs_go ::
    [Defs.Constrs] -> Defs.Constrs -> GHC.Base.Maybe Defs.Constrs
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U> -}
235cfaa622827c9503bf37921bd53770
  getNewerVers ::
    (Defs.PName, Defs.Version)
    -> Defs.Database -> [(Defs.PName, Defs.Version)]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U,U)><S,1*U> -}
91aadd2c767603e4986b1d88b134fee3
  getReqs ::
    (Defs.PName, Defs.Version)
    -> Defs.Database -> GHC.Base.Maybe Defs.Constrs
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U,U)><S,1*U> -}
5a02464b52411f3b9fbefa64e1f88e65
  groupByName ::
    [(Defs.PName, Defs.Version)] -> [[(Defs.PName, Defs.Version)]]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
8ff9be552bd049cd839bcc263710ef88
  install_a :: Properties.InstallProp
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,A><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: Defs.Database)
                   (ds1 :: Defs.PName)
                   (ds2 :: GHC.Base.Maybe Defs.Sol) ->
                 case ds2 of wild {
                   GHC.Base.Nothing -> GHC.Types.True
                   GHC.Base.Just sol
                   -> letrec {
                        go :: [(Defs.PName, Defs.Version)] -> GHC.Types.Bool
                          <join 1> {- Arity: 1 -}
                        = \ (ds3 :: [(Defs.PName, Defs.Version)]) ->
                          case ds3 of wild1 {
                            [] -> GHC.Types.True
                            : y ys
                            -> case Properties.isInDB y ds of wild2 {
                                 GHC.Types.False -> GHC.Types.False GHC.Types.True -> go ys } }
                      } in
                      go sol }) -}
26e0b60b9db05a8d5b53241c8bb79eb9
  install_b :: Properties.InstallProp
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: Defs.Database)
                   (w1 :: Defs.PName)
                   (w2 :: GHC.Base.Maybe Defs.Sol) ->
                 Properties.$winstall_b w2) -}
2e183822703597c3bcd10fd0e5234f5b
  install_b_go :: [[(Defs.PName, Defs.Version)]] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
6bb5b0f048ce506019c1c505b9aadaa9
  install_c :: Properties.InstallProp
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,U><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: Defs.Database)
                   (w1 :: Defs.PName)
                   (w2 :: GHC.Base.Maybe Defs.Sol) ->
                 Properties.$winstall_c w1 w2) -}
75c8f1a02fa718708a00dbac45ae01c2
  install_d :: Properties.InstallProp
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,A><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: Defs.Database)
                   (w1 :: Defs.PName)
                   (w2 :: GHC.Base.Maybe Defs.Sol) ->
                 Properties.$winstall_d w w2) -}
dc6d130b468e848d72308d2a3c654ffd
  install_e ::
    Defs.Database
    -> p
    -> GHC.Base.Maybe [(Defs.PName, Defs.Version)]
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,A><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ @ p
                   (w :: Defs.Database)
                   (w1 :: p)
                   (w2 :: GHC.Base.Maybe [(Defs.PName, Defs.Version)]) ->
                 Properties.$winstall_e @ p w w2) -}
4b15e601f5b2b5d79d730b6fc3e18590
  install_e1 ::
    (Defs.PName, Defs.Version)
    -> (Defs.PName, Defs.Version) -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: (Defs.PName, Defs.Version))
                   (w1 :: (Defs.PName, Defs.Version)) ->
                 case w of ww { (,) ww1 ww2 ->
                 case w1 of ww3 { (,) ww4 ww5 ->
                 Properties.$wlvl ww1 ww2 ww4 ww5 } }) -}
ae63bc3d9e9d78c7b768ad88dfa06b24
  install_f ::
    Defs.Database
    -> Defs.PName
    -> GHC.Base.Maybe [(Defs.PName, Defs.Version)]
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><S,1*U>,
     Unfolding: (\ (ds :: Defs.Database)
                   (ds1 :: Defs.PName)
                   (ds2 :: GHC.Base.Maybe [(Defs.PName, Defs.Version)]) ->
                 case ds2 of wild {
                   GHC.Base.Nothing -> GHC.Types.True
                   GHC.Base.Just sol
                   -> letrec {
                        go :: [(Defs.PName, Defs.Version)] -> GHC.Types.Bool
                          <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (ds3 :: [(Defs.PName, Defs.Version)]) ->
                          case ds3 of wild1 {
                            [] -> GHC.Types.True
                            : y ys
                            -> case y of wild2 { (,) x ds4 ->
                               let {
                                 x1 :: GHC.Types.Bool <join 0> = go ys
                               } in
                               case GHC.Base.eqString
                                      x `cast` (Defs.N:PName[0])
                                      ds1 `cast` (Defs.N:PName[0]) of wild3 {
                                 GHC.Types.False
                                 -> let {
                                      sol' :: [(Defs.PName, Defs.Version)]
                                      = Data.OldList.deleteBy
                                          @ (Defs.PName, Defs.Version)
                                          Properties.install_e1
                                          wild2
                                          sol
                                    } in
                                    case Properties.genConstrs ds sol' of wild4 {
                                      GHC.Base.Nothing -> x1
                                      GHC.Base.Just cs
                                      -> letrec {
                                           go1 :: [(Defs.PName, Defs.PConstr)] -> GHC.Types.Bool
                                             <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                                           = \ (ds5 :: [(Defs.PName, Defs.PConstr)]) ->
                                             case ds5 of wild5 {
                                               [] -> GHC.Types.False
                                               : y1 ys1
                                               -> case y1 of ww { (,) ww1 ww2 ->
                                                  case ww2 of ww3 { (,,) ww4 ww5 ww6 ->
                                                  case Utils.$wsatisfies'
                                                         sol'
                                                         ww1
                                                         ww4
                                                         ww5
                                                         ww6 of wild6 {
                                                    GHC.Types.False -> x1
                                                    GHC.Types.True -> go1 ys1 } } } }
                                         } in
                                         go1 cs }
                                 GHC.Types.True -> x1 } } }
                      } in
                      go sol }) -}
e383eee1285a5a2c19205fa0d99b26e9
  install_g ::
    Defs.Database
    -> p
    -> GHC.Base.Maybe [(Defs.PName, Defs.Version)]
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,A><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ @ p
                   (w :: Defs.Database)
                   (w1 :: p)
                   (w2 :: GHC.Base.Maybe [(Defs.PName, Defs.Version)]) ->
                 Properties.$winstall_g @ p w w2) -}
8a4324644b96e72efbed7909dafb915f
  isInDB ::
    (Defs.PName, Defs.Version) -> Defs.Database -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U,U)><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: (Defs.PName, Defs.Version)) (w1 :: Defs.Database) ->
                 case w of ww { (,) ww1 ww2 -> Properties.$wisInDB ww1 ww2 w1 }) -}
dab1144d696508e70932d219599e83d1
  isReqInSol ::
    (Defs.PName, Defs.PConstr) -> Defs.Sol -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LS(SLL)),1*U(U,1*U(1*U,U,U))><L,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: (Defs.PName, Defs.PConstr)) (w1 :: Defs.Sol) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww2 of ww3 { (,,) ww4 ww5 ww6 ->
                 Properties.$wisReqInSol ww1 ww4 ww5 ww6 w1 } }) -}
94657d8960684adc7d4696d88febfc4b
  parses_db :: Defs.Database -> GHC.Types.Bool
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (_db :: Defs.Database) ->
                 case (Text.Parsec.Prim.runPT
                         @ GHC.Base.String
                         @ Data.Functor.Identity.Identity
                         @ GHC.Types.Char
                         @ ()
                         @ Defs.Database
                         (ParserImpl.$s$fStream[]mtok @ GHC.Types.Char)
                         ParserImpl.parseDatabase1
                           `cast`
                         (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                   <[GHC.Types.Char]>_R
                                   <()>_R
                                   <Data.Functor.Identity.Identity>_R
                                   <Defs.Database>_R))
                         GHC.Tuple.()
                         (GHC.Types.[] @ GHC.Types.Char)
                         (Defs.prettyPkgs _db `cast` (Defs.N:Database[0])))
                        `cast`
                      (Data.Functor.Identity.N:Identity[0]
                           <Data.Either.Either
                              Text.Parsec.Error.ParseError Defs.Database>_R) of wild {
                   Data.Either.Left e -> GHC.Types.False
                   Data.Either.Right v -> Properties.dbEquiv v _db }) -}
60e4a6501a9bdfc6f7d572f86302094e
  sat ::
    Defs.Sol
    -> (Defs.PName, Defs.Version) -> Defs.Database -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,1*U(U,U)><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (sol :: Defs.Sol)
                   (pv :: (Defs.PName, Defs.Version))
                   (db :: Defs.Database) ->
                 case Properties.getReqs pv db of wild {
                   GHC.Base.Nothing -> GHC.Types.False
                   GHC.Base.Just cs
                   -> (Utils.satisfies1 sol cs)
                        `cast`
                      (Data.Semigroup.Internal.N:All[0]) }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

